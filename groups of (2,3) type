
G2:=GL(2,Integers(2));
G4:=GL(2,Integers(4));
G8:=GL(2,Integers(8));
G16:=GL(2,Integers(16));
G32:=GL(2,Integers(32));

G3:=GL(2,Integers(3));
G9:=GL(2,Integers(9));
G27:=GL(2,Integers(27));

ANSWERS:={};

/* level 2*27 */

Left:=2;
Right:=27;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

/* #1.) 2.2.0.a.1, MAXIMAL */ H21:=sub<G2|[0,1,1,1]>;
/* #2.) 2.3.0.a.1, MAXIMAL */ H22:=sub<G2|[0,1,1,0]>;
/* #3.) 2.2.0.a.1 */ H23:=sub<G2|[]>;

LeftGroups:=[H21,H22];

X271:=sub<GLeftRight|[1,1,0,1],[2,1,9,5],[1,2,3,2+27],KerRight1,KerRight2,KerRight3>; /* with Chinese remainder theorem */

RightGroups:=[X271];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no hits

/* level 4*27 */

Left:=4;
Right:=27;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

H41:=sub<G4|[1,2,0,1],[1,1,1,2],[1,1,0,3]>; /* 4.2.0.1, 4.2.0.a.1 */
H42:=sub<G4|[1,2,0,1],[3,0,0,3],[1,0,2,1],[1,1,0,3]>; /* 4.6.0.5, 4.6.0.a.1 */ 
H43:=sub<G4|[1,1,1,2],[0,1,3,0],[1,1,0,3]>; /* 4.4.0.1, 4.4.0.a.1 */
H44:=sub<G4|[3,0,0,3],[0,1,3,2],[1,0,0,3]>; /* 4.6.0.3, 4.6.0.b.1 */
H45:=sub<G4|[3,0,0,3],[0,1,3,2],[1,2,0,3]>; /* 4.6.0.1, 4.6.0.c.1 */
H46:=sub<G4|[1,2,2,1],[0,1,3,0],[1,0,0,3]>; /* 4.6.0.4, 4.6.0.e.1 */
H47:=sub<G4|[1,2,2,1],[0,1,3,0],[1,2,0,3]>; /* 4.6.0.2, 4.6.0.d.1 */
H48:=sub<G4|[2,1,1,3],[1,1,0,3]>; /* 4.8.0.2, 4.8.0.b.1 */
H49:=sub<G4|[3,0,0,3],[1,2,2,1],[0,1,1,0]>; /* 4.12.0.9, 4.12.0.d.1 */
H410:=sub<G4|[3,0,0,3],[1,2,2,1],[1,0,0,3]>; /* 4.12.0.4, 4.12.0.a.1 */

H411:=sub<G4|[3,0,0,3],[1,2,2,1],[1,2,0,3]>; /* 4.12.0.3, 4.12.0.b.1 */
H412:=sub<G4|[0,1,3,0],[1,0,0,3]>; /* 4.12.0.11, 4.12.0.f.1 */
H413:=sub<G4|[0,1,3,0],[2,1,1,2]>; /* 4.12.0.5, 4.12.0.e.1 */
H414:=sub<G4|[3,0,0,3],[1,0,0,3]>; /* 4.24.0.8, 4.24.0.b.1 */
H415:=sub<G4|[3,0,0,3],[1,3,0,3]>; /* 4.24.0.2, 4.24.0.c.1 */

X41:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+4]>; /* 4.2.0.1, 4.2.0.a.1, with Chinese remainder theorem */
X42:=sub<GLeftRight|[1,2,0,1],[3+4,0,0,3+4],[1,0,2,1],[1,1,0,3+4]>; /* 4.6.0.5, 4.6.0.a.1, with Chinese remainder theorem */ 
X43:=sub<GLeftRight|[1,1,1,2],[0,1,3+4,0],[1,1,0,3+4]>; /* 4.4.0.1, 4.4.0.a.1, with Chinese remainder theorem */
X44:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,0,0,3+4]>; /* 4.6.0.3, 4.6.0.b.1, with Chinese remainder theorem */
X45:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,2,0,3+4]>; /* 4.6.0.1, 4.6.0.c.1, with Chinese remainder theorem */
X46:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,0,0,3+4]>; /* 4.6.0.4, 4.6.0.e.1, with Chinese remainder theorem */
X47:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,2,0,3+4]>; /* 4.6.0.2, 4.6.0.d.1, with Chinese remainder theorem */
X48:=sub<GLeftRight|[2,1,1,3],[1,1,0,3+4]>; /* 4.8.0.2, 4.8.0.b.1, with Chinese remainder theorem */
X49:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[0,1,1,0]>; /* 4.12.0.9, 4.12.0.d.1, with Chinese remainder theorem */
X410:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,0,0,3+4]>; /* 4.12.0.4, 4.12.0.a.1, with Chinese remainder theorem */

X411:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,2,0,3+4]>; /* 4.12.0.3, 4.12.0.b.1, with Chinese remainder theorem */
X412:=sub<GLeftRight|[0,1,3+4,0],[1,0,0,3+4]>; /* 4.12.0.11, 4.12.0.f.1, with Chinese remainder theorem */
X413:=sub<GLeftRight|[0,1,3+4,0],[2,1+4,1,2]>; /* 4.12.0.5, 4.12.0.e.1, with Chinese remainder theorem */
X414:=sub<GLeftRight|[3+4,0,0,3+4],[1,0,0,3+4]>; /* 4.24.0.8, 4.24.0.b.1, with Chinese remainder theorem */
X415:=sub<GLeftRight|[3+4,0,0,3+4],[1,3,0,3+4]>; /* 4.24.0.2, 4.24.0.c.1, with Chinese remainder theorem */

LeftGroups:=[
X41,X43
];

X271:=sub<GLeftRight|[1,1,0,1],[2,1,9,5],[1,2,3,2+27],KerRight1,KerRight2,KerRight3>;

RightGroups:=[X271];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no hits

/* level 8*27 */

Left:=8;
Right:=27;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

/* #1.) 8.2.0.a.1, MAXIMAL */ H81:=sub<G8|[6,5,3,7],[6,7,7,4]>;
/* #2.) 8.2.0.b.1, MXIMAL */ H82:=sub<G8|[5,2,1,1],[5,7,7,0]>;
/* #3.) 8.6.0.a.1 */ H83:=sub<G8|[3,0,2,1],[3,6,0,1],[7,1,4,7]>;
/* #4.) 8.6.0.b.1 */ H84:=sub<G8|[3,1,2,7],[3,1,4,3],[3,4,4,5]>;
/* #5.) 8.6.0.c.1 */ H85:=sub<G8|[1,3,6,5],[3,5,4,1],[5,3,2,7]>;
/* #6.) 8.6.0.d.1 */ H86:=sub<G8|[1,5,6,3],[3,0,2,7],[7,1,2,7]>;
/* #7.) 8.6.0.e.1 */ H87:=sub<G8|[1,6,2,3],[7,5,6,1],[7,7,2,7]>;
/* #8.) 8.6.0.f.1 */ H88:=sub<G8|[1,4,6,3],[3,1,6,7],[5,4,4,3]>;
/* #9.) 8.8.0.a.1 */ H89:=sub<G8|[4,3,3,5],[4,7,5,0]>;
/* #10.) 8.12.0.a.1 */ H810:=sub<G8|[3,4,4,3],[5,0,6,7],[5,2,0,3],[7,2,0,7]>;
/* #11.) 8.12.0.b.1 */ H811:=sub<G8|[3,0,6,7],[3,2,2,1],[5,2,0,5],[5,4,6,3]>;
/* #12.) 8.12.0.d.1 */ H812:=sub<G8|[3,7,4,1],[5,3,0,3],[7,4,4,5],[7,7,0,1]>;
/* #13.) 8.12.0.f.1 */ H813:=sub<G8|[1,1,0,7],[1,7,2,3],[3,2,2,5],[5,3,4,7]>;
/* #14.) 8.12.0.g.1 */ H814:=sub<G8|[1,7,2,1],[5,6,6,5],[7,4,4,7]>;
/* #15.) 8.12.0.h.1 */ H815:=sub<G8|[3,3,0,7],[5,7,2,5],[7,0,0,7]>;
/* #16.) 8.12.0.i.1 */ H816:=sub<G8|[3,0,0,5],[5,3,6,3],[7,0,4,1]>;
/* #17.) 8.12.0.k.1 */ H817:=sub<G8|[1,5,0,5],[3,7,4,5],[5,2,4,3],[7,1,4,7]>;
/* #18.) 8.12.0.l.1 */ H818:=sub<G8|[1,0,4,1],[1,7,4,7],[3,1,6,1],[3,6,6,1]>;
/* #19.) 8.12.0.m.1 */ H819:=sub<G8|[1,6,0,7],[5,1,0,7],[5,1,4,7],[7,1,4,5]>;
/* #20.) 8.12.0.n.1 */ H820:=sub<G8|[1,0,0,7],[1,4,0,3],[3,5,0,1],[5,5,0,7],[7,3,0,1]>;
/* #21.) 8.12.0.o.1 */ H821:=sub<G8|[1,4,0,5],[3,6,0,5],[3,6,0,7],[5,1,4,5]>;
/* #22.) 8.12.0.p.1 */ H822:=sub<G8|[1,4,4,5],[1,7,0,7],[3,1,0,5],[5,0,0,7]>;
/* #23.) 8.12.0.q.1 */ H823:=sub<G8|[3,3,6,1],[3,4,2,5],[5,5,0,7],[7,5,4,5]>;
/* #24.) 8.12.0.r.1 */ H824:=sub<G8|[1,0,0,5],[5,5,2,3],[7,3,0,5],[7,6,0,7]>;
/* #25.) 8.12.0.s.1 */ H825:=sub<G8|[1,3,2,3],[5,0,6,3],[5,1,6,3],[7,7,6,5]>;
/* #26.) 8.12.0.t.1 */ H826:=sub<G8|[1,2,0,5],[5,2,6,7],[5,3,4,3],[7,1,0,5]>;
/* #27.) 8.12.0.u.1 */ H827:=sub<G8|[1,6,2,7],[3,1,2,1],[5,3,4,7],[5,5,4,7]>;
/* #28.) 8.12.0.v.1 */ H828:=sub<G8|[1,3,2,3],[3,5,2,1],[5,6,0,5],[7,3,4,1]>;
/* #29.) 8.12.0.w.1 */ H829:=sub<G8|[5,1,6,1],[5,1,6,5],[7,1,6,1],[7,7,2,7]>;
/* #30.) 8.12.0.x.1 */ H830:=sub<G8|[3,4,0,5],[7,1,6,7],[7,6,0,5]>;
/* #31.) 8.12.0.y.1 */ H831:=sub<G8|[1,4,2,3],[1,5,4,3],[1,5,6,7],[3,1,0,5]>;
/* #32.) 8.12.0.z.1 */ H832:=sub<G8|[1,0,4,5],[1,0,6,7],[1,3,2,7],[5,1,4,3]>;
/* #33.) 8.16.0.a.1 */ H833:=sub<G8|[4,5,1,4],[4,5,3,7],[5,3,5,2]>;
/* #34.) 8.24.0.a.1 */ H834:=sub<G8|[3,2,6,5],[5,6,2,3],[5,6,6,3],[7,0,2,1]>;
/* #35.) 8.24.0.ba.1 */ H835:=sub<G8|[1,1,0,7],[3,7,0,7],[5,2,0,3],[7,1,0,1]>;
/* #36.) 8.24.0.ba.2 */ H836:=sub<G8|[3,0,0,5],[5,3,0,5],[7,2,0,5],[7,7,0,3]>;
/* #37.) 8.24.0.bb.1 */ H837:=sub<G8|[1,2,0,3],[1,4,0,5],[3,1,0,7],[5,5,0,7]>;
/* #38.) 8.24.0.bb.2 */ H838:=sub<G8|[1,1,0,5],[3,5,0,3],[5,1,0,5],[5,3,0,3]>;
/* #39.) 8.24.0.bc.1 */ H839:=sub<G8|[1,3,0,3],[1,5,4,3],[7,4,6,1]>;
/* #40.) 8.24.0.be.1 */ H840:=sub<G8|[1,3,0,3],[5,1,6,7],[5,2,6,3]>;
/* #41.) 8.24.0.bf.1 */ H841:=sub<G8|[3,1,0,1],[5,0,0,1],[5,3,0,3],[5,7,2,3]>;
/* #42.) 8.24.0.bh.1 */ H842:=sub<G8|[1,3,6,7],[3,5,6,5],[5,4,6,3]>;
/* #43.) 8.24.0.bi.1 */ H843:=sub<G8|[1,1,2,7],[3,7,0,1],[5,3,0,3]>;
/* #44.) 8.24.0.bj.1 */ H844:=sub<G8|[3,2,6,1],[3,3,6,5],[7,4,6,5]>;
/* #45.) 8.24.0.bl.1 */ H845:=sub<G8|[1,3,2,7],[3,3,2,1],[7,6,0,5]>;
/* #46.) 8.24.0.bl.2 */ H846:=sub<G8|[3,6,0,1],[5,4,0,1],[7,3,2,7]>;
/* #47.) 8.24.0.bn.1 */ H847:=sub<G8|[5,3,4,3],[7,0,2,5],[7,1,4,5]>;
/* #48.) 8.24.0.bo.1 */ H848:=sub<G8|[1,1,0,7],[1,5,6,7],[1,6,2,7]>;
/* #49.) 8.24.0.bp.1 */ H849:=sub<G8|[1,1,0,7],[5,3,4,3],[5,5,6,7]>;
/* #50.) 8.24.0.bq.1 */ H850:=sub<G8|[1,5,4,3],[1,6,0,5],[5,7,6,3]>;
/* #51.) 8.24.0.bs.1 */ H851:=sub<G8|[1,4,0,1],[1,6,2,7],[7,4,4,3],[7,5,0,1]>;
/* #52.) 8.24.0.bt.1 */ H852:=sub<G8|[1,5,6,7],[5,1,2,3],[5,5,6,3],[7,0,6,5]>;
/* #53.) 8.24.0.c.1 */ H853:=sub<G8|[1,6,4,3],[3,6,0,1],[5,2,0,7],[5,4,4,3],[7,4,4,1]>;
/* #54.) 8.24.0.d.1 */ H854:=sub<G8|[1,4,4,1],[1,6,0,3],[1,6,4,7],[3,6,0,3],[5,2,4,1]>;
/* #55.) 8.24.0.d.2 */ H855:=sub<G8|[1,2,4,5],[3,2,0,3],[5,2,4,5],[5,4,0,3],[7,6,4,3]>;
/* #56.) 8.24.0.e.1 */ H856:=sub<G8|[1,0,4,1],[1,2,0,1],[5,0,4,1],[7,0,0,7],[7,4,4,1]>;
/* #57.) 8.24.0.e.2 */ H857:=sub<G8|[1,4,4,1],[3,2,0,1],[3,2,0,7],[5,2,0,7],[5,6,0,5]>;
/* #58.) 8.24.0.f.1 */ H858:=sub<G8|[1,2,6,3],[3,4,2,5],[5,4,6,3],[7,2,6,1]>;
/* #59.) 8.24.0.g.1 */ H859:=sub<G8|[3,6,0,5],[7,2,0,3],[7,4,0,3],[7,6,6,1]>;
/* #60.) 8.24.0.h.1 */ H860:=sub<G8|[1,4,0,7],[3,2,0,3],[3,4,0,5],[3,6,4,7],[5,4,4,7]>;
/* #61.) 8.24.0.i.1 */ H861:=sub<G8|[3,4,0,7],[3,6,0,7],[5,0,0,3],[5,0,0,7],[5,2,0,1]>;
/* #62.) 8.24.0.k.1 */ H862:=sub<G8|[1,4,0,3],[5,4,0,7],[7,1,0,1],[7,4,0,7]>;
/* #63.) 8.24.0.m.1 */ H863:=sub<G8|[5,1,2,3],[5,4,4,5],[5,7,4,7]>;
/* #64.) 8.24.0.n.1 */ H864:=sub<G8|[1,0,4,1],[5,5,2,3],[7,0,6,5],[7,3,2,5]>;
/* #65.) 8.24.0.o.1 */ H865:=sub<G8|[1,3,0,7],[1,6,2,7],[3,3,0,5]>;
/* #66.) 8.24.0.q.1 */ H866:=sub<G8|[1,0,0,5],[1,5,0,7],[5,4,0,1],[5,7,0,3],[7,7,0,1]>;
/* #67.) 8.24.0.r.1 */ H867:=sub<G8|[5,7,0,7],[7,1,0,5],[7,2,0,1],[7,4,0,7]>;
/* #68.) 8.24.0.s.1 */ H868:=sub<G8|[1,1,6,3],[1,4,6,7],[1,6,6,3]>;
/* #69.) 8.24.0.t.1 */ H869:=sub<G8|[3,1,0,1],[3,6,0,7],[7,0,0,7],[7,2,4,3]>;
/* #70.) 8.24.0.v.1 */ H870:=sub<G8|[1,7,4,7],[1,7,6,7],[7,5,6,5]>;
/* #71.) 8.24.0.x.1 */ H871:=sub<G8|[1,5,0,7],[3,6,4,7],[5,7,4,3],[7,6,0,7]>;
/* #72.) 8.24.0.y.1 */ H872:=sub<G8|[1,5,4,7],[3,5,4,5],[5,3,4,5]>;
/* #73.) 8.24.0.z.1 */ H873:=sub<G8|[1,7,4,7],[7,6,0,7],[7,7,2,5]>;
/* #74.) 8.48.0.b.1 */ H874:=sub<G8|[1,0,4,1],[1,4,0,1],[5,0,0,1],[7,4,4,7],[7,6,0,1]>;
/* #75.) 8.48.0.b.2 */ H875:=sub<G8|[1,0,4,1],[1,4,0,1],[3,2,0,1],[7,4,0,3],[7,4,4,7]>;
/* #76.) 8.48.0.c.1 */ H876:=sub<G8|[1,0,4,1],[1,4,0,1],[7,4,0,1],[7,4,0,3],[7,4,4,7]>;
/* #77.) 8.48.0.e.1 */ H877:=sub<G8|[1,0,4,1],[1,2,4,7],[3,0,4,1],[7,6,0,1]>;
/* #78.) 8.48.0.e.2 */ H878:=sub<G8|[1,0,4,1],[3,2,0,5],[3,6,4,7],[7,4,0,5]>;
/* #79.) 8.48.0.f.1 */ H879:=sub<G8|[3,2,0,1],[3,2,4,1],[5,6,0,1],[7,0,0,7]>;
/* #80.) 8.48.0.h.1 */ H880:=sub<G8|[1,6,0,7],[3,2,4,7],[3,4,0,5],[5,6,0,5]>;
/* #81.) 8.48.0.h.2 */ H881:=sub<G8|[1,4,4,5],[5,6,0,5],[7,4,0,7],[7,4,4,5]>;
/* #82.) 8.48.0.i.1 */ H882:=sub<G8|[3,2,0,1],[5,2,0,5],[5,2,0,7],[7,4,4,1]>;
/* #83.) 8.48.0.k.1 */ H883:=sub<G8|[1,4,0,3],[1,6,0,7],[5,6,0,7],[7,2,0,3]>;
/* #84.) 8.48.0.k.2 */ H884:=sub<G8|[3,6,0,3],[5,2,0,1],[5,2,0,7],[7,4,0,1]>;
/* #85.) 8.48.0.l.1 */ H885:=sub<G8|[1,2,0,7],[1,4,0,7],[5,4,0,1],[7,6,0,1]>;
/* #86.) 8.48.0.l.2 */ H886:=sub<G8|[7,0,0,5],[7,4,0,7],[7,6,0,1],[7,6,0,7]>;
/* #87.) 8.48.0.m.1 */ H887:=sub<G8|[1,6,0,3],[7,2,0,7],[7,3,0,1]>;
/* #88.) 8.48.0.m.2 */ H888:=sub<G8|[5,3,0,3],[5,4,0,7],[7,5,0,3]>;
/* #89.) 8.48.0.n.1 */ H889:=sub<G8|[1,5,0,7],[5,2,0,1],[5,4,0,1],[7,2,0,7]>;
/* #90.) 8.48.0.n.2 */ H890:=sub<G8|[1,6,0,5],[3,1,0,5],[5,1,0,3],[5,5,0,7]>;
/* #91.) 8.48.0.p.1 */ H891:=sub<G8|[1,5,0,3],[1,6,0,7],[7,3,0,3]>;
/* #92.) 8.48.0.q.1 */ H892:=sub<G8|[1,3,0,7],[1,7,2,3],[7,5,6,1]>;
/* #93.) 8.48.0.q.2 */ H893:=sub<G8|[3,4,0,7],[5,4,2,3],[5,7,0,3]>;

X81:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,0,0,3+8],[1,1,0,5]>; /* 8.2.0.1, 8.2.0.a.1, with Chinese remainder theorem */
X82:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+8],[1,1,0,5]>; /* 8.2.0.2, 8.2.0.b.1, with Chinese remainder theorem */
X83:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.6.0.5, 8.6.0.a.1, with Chinese remainder theorem */
X84:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,1,0,3+8],[1,1,0,5]>; /* 8.6.0.6, 8.6.0.b.1, with Chinese remainder theorem */
X85:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.1, 8.6.0.c.1, with Chinese remainder theorem */
X86:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.4, 8.6.0.d.1, with Chinese remainder theorem */
X87:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.2, 8.6.0.f.1, with Chinese remainder theorem */
X88:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.3, 8.6.0.e.1, with Chinese remainder theorem */
X89:=sub<GLeftRight|[1,4,0,1],[2,1,5,3],[3+8,3,0,5],[0,1,3+8,0]>; /* 8.8.0.1, 8.8.0.a.1, with Chinese remainder theorem */
X810:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[0,1,1,0]>; /* 8.12.0.35, 8.12.0.f.1, with Chinese remainder theorem */

X811:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[1,2,0,5]>; /* 8.12.0.3, 8.12.0.a.1, with Chinese remainder theorem */
X812:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[0,1,1,0]>; /* 8.12.0.16, 8.12.0.d.1, with Chinese remainder theorem */
X813:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.12.0.4, 8.12.0.b.1, with Chinese remainder theorem */
X814:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,5],[0,1,1,0]>; /* 8.12.0.39, 8.12.0.g.1, with Chinese remainder theorem */
X815:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[0,1,3+8,2]>; /* 8.12.0.26, 8.12.0.h.1, with Chinese remainder theorem */
X816:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[2,1,1,2+8]>; /* 8.12.0.36, 8.12.0.l.1, with Chinese remainder theorem */
X817:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[0,1,3+8,0]>; /* 8.12.0.19, 8.12.0.i.1, with Chinese remainder theorem */
X818:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[2,1,1,2+8]>; /* 8.12.0.15, 8.12.0.k.1, with Chinese remainder theorem */
X819:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[1,0,0,3+8],[1+8,2,2,1]>; /* 8.12.0.28, 8.12.0.t.1, with Chinese remainder theorem */
X820:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.12.0.29, 8.12.0.s.1, with Chinese remainder theorem */

X821:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[0,1,3+8,0],[2,1,5,2]>; /* 8.24.0.37, 8.24.0.m.1, with Chinese remainder theorem */
X822:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.24.0.80, 8.24.0.n.1, with Chinese remainder theorem */
X823:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.22, 8.24.0.c.1, with Chinese remainder theorem */
X824:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,2,0,5],[3+8,0,2,5]>; /* 8.24.0.31, 8.24.0.a.1, with Chinese remainder theorem */
X825:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,2,0,5]>; /* 8.24.0.74, 8.24.0.t.1, with Chinese remainder theorem */
X826:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,3,2,3+8]>; /* 8.24.0.81, 8.24.0.v.1, with Chinese remainder theorem */
X827:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.34, 8.12.0.z.1, with Chinese remainder theorem */
X828:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.30, 8.12.0.y.1, with Chinese remainder theorem */
X829:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.18, 8.12.0.x.1, with Chinese remainder theorem */
X830:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.17, 8.12.0.w.1, with Chinese remainder theorem */

X831:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,0,0,5]>; /* 8.12.0.9, 8.12.0.p.1, with Chinese remainder theorem */
X832:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,4,0,5]>; /* 8.12.0.10, 8.12.0.o.1, with Chinese remainder theorem */
X833:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.11, 8.12.0.m.1, with Chinese remainder theorem */
X834:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.5, 8.12.0.n.1, with Chinese remainder theorem */
X835:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.31, 8.12.0.v.1, with Chinese remainder theorem */
X836:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.33, 8.12.0.u.1, with Chinese remainder theorem */
X837:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.12.0.32, 8.12.0.q.1, with Chinese remainder theorem */
X838:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.12.0.27, 8.12.0.r.1, with Chinese remainder theorem */
X839:=sub<GLeftRight|[1,1,1,2],[0,3+8,5,0],[3+8,3,0,5],[2,1,1,3]>; /* 8.16.0.1, 8.16.0.a.1, with Chinese remainder theorem */
X840:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.23, 8.24.0.i.1, with Chinese remainder theorem */

X841:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.24.0.25, 8.24.0.h.1, with Chinese remainder theorem */
X842:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,1,0,5]>; /* 8.24.0.99, 8.24.0.k.1, with Chinese remainder theorem */
X843:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,5],[3+8,0,2,1]>; /* 8.24.0.35, 8.24.0.g.1, with Chinese remainder theorem */
X844:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,2,3+8],[3,2,2,1]>; /* 8.24.0.36, 8.24.0.f.1, with Chinese remainder theorem */
X845:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1,0,0,5]>; /* 8.24.0.67, 8.24.0.q.1, with Chinese remainder theorem */
X846:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1+8,1,4,1]>; /* 8.24.0.100, 8.24.0.r.1, with Chinese remainder theorem */
X847:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[3,2,2,1]>; /* 8.24.0.130, 8.24.0.s.1, with Chinese remainder theorem */
X848:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,3,2,3+8],[3,2,2,1]>; /* 8.24.0.137, 8.24.0.z.1, with Chinese remainder theorem */
X849:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,0,0,5],[1+8,1,4,1]>; /* 8.24.0.115, 8.24.0.y.1, with Chinese remainder theorem */
X850:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[1,0,4,5]>; /* 8.24.0.70, 8.24.0.x.1, with Chinese remainder theorem */

X851:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[3+8,0,2,1]>; /* 8.24.0.129, 8.24.0.o.1, with Chinese remainder theorem */
X852:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.83, 8.24.0.bt.1, with Chinese remainder theorem */
X853:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,2,2,3]>; /* 8.24.0.131, 8.24.0.bp.1, with Chinese remainder theorem */
X854:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.24.0.82, 8.24.0.bn.1, with Chinese remainder theorem */
X855:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,5],[1,2,2,3]>; /* 8.24.0.41, 8.24.0.bs.1, with Chinese remainder theorem */
X856:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.24.0.84, 8.24.0.bh.1, with Chinese remainder theorem */
X857:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1+8,2,2,1]>; /* 8.24.0.127, 8.24.0.bj.1, with Chinese remainder theorem */
X858:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.24.0.79, 8.24.0.bf.1, with Chinese remainder theorem */
X859:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,5],[2,1,1,2+8]>; /* 8.24.0.39, 8.24.0.be.1, with Chinese remainder theorem */
X860:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.24.0.128, 8.24.0.bi.1, with Chinese remainder theorem */

X861:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[2,3,5,2]>; /* 8.24.0.134, 8.24.0.bo.1, with Chinese remainder theorem */
X862:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[1+8,2,2,1]>; /* 8.24.0.136, 8.24.0.bq.1, with Chinese remainder theorem */
X863:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[2,1,1,2+8]>; /* 8.24.0.135, 8.24.0.bc.1, with Chinese remainder theorem */
X864:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[1,4,0,5],[1,6,0,3+8]>; /* 8.24.0.90, 8.24.0.bb.2, with Chinese remainder theorem */
X865:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.24.0.91, 8.24.0.ba.2, with Chinese remainder theorem */
X866:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[5,4,0,1]>; /* 8.24.0.88, 8.24.0.bb.1, with Chinese remainder theorem */
X867:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[5,2,0,3+8],[5,4,0,1]>; /* 8.24.0.92, 8.24.0.ba.1, with Chinese remainder theorem */
X868:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.15, 8.24.0.d.1, with Chinese remainder theorem */
X869:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.18, 8.24.0.e.1, with Chinese remainder theorem */
X870:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.24.0.10, 8.24.0.e.2, with Chinese remainder theorem */

X871:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.24.0.13, 8.24.0.d.2, with Chinese remainder theorem */
X872:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[1,2,0,3+8],[1,4,0,5]>; /* 8.24.0.122, 8.24.0.bl.2, with Chinese remainder theorem */
X873:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[5,4,0,1],[3+8,6,0,1]>; /* 8.24.0.119, 8.24.0.bl.1, with Chinese remainder theorem */
X874:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.44, 8.48.0.b.2, with Chinese remainder theorem */
X875:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.96, 8.48.0.f.1, with Chinese remainder theorem */
X876:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[3+8,2,0,5]>; /* 8.48.0.50, 8.48.0.b.1, with Chinese remainder theorem */
X877:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,0,2,5]>; /* 8.48.0.88, 8.48.0.e.2, with Chinese remainder theorem */
X878:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,2,0,5]>; /* 8.48.0.137, 8.48.0.e.1, with Chinese remainder theorem */
X879:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[5,0,0,1]>; /* 8.48.0.45, 8.48.0.c.1, with Chinese remainder theorem */
X880:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.48.0.97, 8.48.0.i.1, with Chinese remainder theorem */

X881:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,5],[1,0,4,3+8]>; /* 8.48.0.98, 8.48.0.l.2, with Chinese remainder theorem */
X882:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.91, 8.48.0.k.2, with Chinese remainder theorem */
X883:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.123, 8.48.0.k.1, with Chinese remainder theorem */
X884:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,5],[1,2,4,3]>; /* 8.48.0.144, 8.48.0.l.1, with Chinese remainder theorem */
X885:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,0,0,5]>; /* 8.48.0.197, 8.48.0.n.2, with Chinese remainder theorem */
X886:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,2,0,5]>; /* 8.48.0.199, 8.48.0.n.1, with Chinese remainder theorem */
X887:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,3,4,1]>; /* 8.48.0.217, 8.48.0.p.1, with Chinese remainder theorem */
X888:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,0,0,5],[1,2,4,3]>; /* 8.48.0.138, 8.48.0.h.1, with Chinese remainder theorem */
X889:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,2,0,5],[1,0,4,3+8]>; /* 8.48.0.89, 8.48.0.h.2, with Chinese remainder theorem */
X890:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1,0,4,3+8]>; /* 8.48.0.218, 8.48.0.m.1, with Chinese remainder theorem */

X891:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1+8,1,4,1]>; /* 8.48.0.224 , 8.48.0.m.2, with Chinese remainder theorem */
X892:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[1,4,0,5]>; /* 8.48.0.204, 8.48.0.q.2, with Chinese remainder theorem */
X893:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[5,4,0,1]>; /* 8.48.0.203, 8.48.0.q.1, with Chinese remainder theorem */


LeftGroups:=[
X81,X82
];

X271:=sub<GLeftRight|[1,1,0,1],[2,1,9,5],[1,2,3,2+27],KerRight1,KerRight2,KerRight3>;

RightGroups:=[X271];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no hits

/* level 16*9 */

G2:=GL(2,Integers(2));
G4:=GL(2,Integers(4));
G8:=GL(2,Integers(8));
G16:=GL(2,Integers(16));
G32:=GL(2,Integers(32));

G3:=GL(2,Integers(3));
G9:=GL(2,Integers(9));
G27:=GL(2,Integers(27));

Left:=16;
Right:=9;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

/* 1.) 16.16.0.a.1 */ H161:=sub<G16|[3,3,14,5],[6,15,3,6]>;
/* 2.) 16.16.0.b.1 */ H162:=sub<G16|[0,9,3,4],[7,8,13,9]>;
/* 3.) 16.24.0.a.1 */ H163:=sub<G16|[3,11,0,5],[3,14,14,11],[15,12,0,15]>;
/* 4.) 16.24.0.c.1 */ H164:=sub<G16|[1,12,14,7],[7,3,4,15],[11,7,2,3]>;
/* 5.) 16.24.0.e.1 */ H165:=sub<G16|[3,0,8,15],[9,4,0,15],[11,12,8,11],[11,13,8,15],[13,7,8,7]>;
/* 6.) 16.24.0.e.2 */ H166:=sub<G16|[3,11,0,1],[5,13,0,15],[7,9,8,15],[13,1,0,13],[13,1,8,9]>;
/* 7.) 16.24.0.f.1 */ H167:=sub<G16|[3,0,8,5],[3,5,0,5],[9,14,0,15],[15,1,8,5],[15,9,8,1]>;
/* 8.) 16.24.0.f.2 */ H168:=sub<G16|[5,4,0,9],[7,14,8,9],[11,10,0,7],[13,6,0,3],[15,13,0,13]>;
/* 9.) 16.24.0.g.1 */ H169:=sub<G16|[3,10,0,5],[7,6,0,1],[7,15,0,7],[7,15,0,13],[13,14,0,1]>;
/* 10.) 16.24.0.h.1 */ H1610:=sub<G16|[3,15,0,5],[5,1,0,5],[11,5,8,9],[11,14,0,13],[13,6,0,11]>;
/* 11.) 16.24.0.i.1 */ H1611:=sub<G16|[5,1,12,11],[7,2,8,1],[7,3,4,3],[9,14,0,11]>;
/* 12.) 16.24.0.j.1 */ H1612:=sub<G16|[3,5,12,5],[9,15,4,13],[11,7,4,1],[13,11,4,11]>;
/* 13.) 16.24.0.k.1 */ H1613:=sub<G16|[5,11,4,3],[5,12,10,11],[9,12,12,1],[15,10,12,3]>;
/* 14.) 16.24.0.k.2 */ H1614:=sub<G16|[3,4,14,13],[5,10,0,9],[7,5,0,5],[9,10,12,5]>;
/* 15.) 16.24.0.l.1 */ H1615:=sub<G16|[7,2,8,11],[7,7,4,13],[7,7,4,13],[9,6,10,15],[9,9,10,11]>;
/* 16.) 16.24.0.l.2 */ H1616:=sub<G16|[1,7,2,11],[3,8,4,3],[9,4,14,15],[11,15,6,1]>;
/* 17.) 16.24.0.m.1 */ H1617:=sub<G16|[7,7,12,1],[7,11,6,9],[9,5,0,15],[11,14,10,9]>;
/* 18.) 16.24.0.m.2 */ H1618:=sub<G16|[1,10,8,9],[5,1,12,11],[5,9,14,3],[15,1,14,13]>;
/* 19.) 16.24.0.n.1 */ H1619:=sub<G16|[3,6,4,7],[7,5,14,5],[9,11,14,11],[15,3,8,1]>;
/* 20.) 16.24.0.n.2 */ H1620:=sub<G16|[5,9,8,11],[15,4,6,13],[15,7,2,1],[15,14,14,9]>;
/* 21.) 16.24.0.o.1 */ H1621:=sub<G16|[1,14,8,3],[11,1,6,5],[11,5,6,9],[15,9,14,7]>;
/* 22.) 16.24.0.o.2 */ H1622:=sub<G16|[1,11,10,15],[3,13,14,5],[5,5,6,13],[7,5,6,11]>;
/* 23.) 16.24.0.p.1 */ H1623:=sub<G16|[3,5,10,5],[3,10,4,3],[9,12,14,7],[11,14,0,7]>;
/* 24.) 16.24.0.p.2 */ H1624:=sub<G16|[3,0,10,5],[9,5,8,7],[9,11,14,7],[13,5,12,3]>;
/* 25.) 16.48.0.a.1 */ H1625:=sub<G16|[9,0,4,9],[11,12,10,5],[11,14,6,5],[15,0,0,15]>;
/* 26.) 16.48.0.bb.1 */ H1626:=sub<G16|[1,10,0,15],[3,3,8,7],[9,4,8,13],[15,6,8,13]>;
/* 27.) 16.48.0.bb.2 */ H1627:=sub<G16|[1,7,8,11],[5,1,0,13],[5,2,8,9],[7,12,0,1]>;
/* 28.) 16.48.0.c.1 */ H1628:=sub<G16|[3,2,4,7],[5,4,12,9],[5,10,0,5],[9,8,6,7]>;
/* 29.) 16.48.0.c.2 */ H1629:=sub<G16|[7,0,2,9],[11,12,0,11],[15,2,6,9],[15,14,8,7]>;
/* 30.) 16.48.0.d.1 */ H1630:=sub<G16|[3,0,8,1],[5,8,0,11],[11,10,8,3],[15,0,8,9],[15,6,0,5]>;
/* 31.) 16.48.0.d.2 */ H1631:=sub<G16|[1,14,0,5],[5,6,8,15],[11,10,8,3],[13,0,8,15],[15,6,0,3]>;
/* 32.) 16.48.0.e.1 */ H1632:=sub<G16|[1,14,0,3],[5,4,8,15],[13,5,8,3],[15,15,0,3]>;
/* 33.) 16.48.0.h.1 */ H1633:=sub<G16|[3,14,2,5],[7,7,6,9],[9,7,0,15]>;
/* 34.) 16.48.0.h.2 */ H1634:=sub<G16|[5,14,14,11],[11,9,8,13],[13,13,2,11]>;
/* 35.) 16.48.0.i.1 */ H1635:=sub<G16|[1,6,10,7],[9,13,10,15],[11,14,0,11]>;
/* 36.) 16.48.0.j.1 */ H1636:=sub<G16|[1,8,0,13],[1,10,0,9],[13,0,8,13],[13,5,8,11],[15,3,0,1]>;
/* 37.) 16.48.0.l.1 */ H1637:=sub<G16|[1,1,0,3],[3,1,8,7],[3,6,8,11],[5,3,8,9]>;
/* 38.) 16.48.0.l.2 */ H1638:=sub<G16|[3,7,8,7],[5,0,0,11],[5,8,8,13],[9,13,8,11]>;
/* 39.) 16.48.0.m.1 */ H1639:=sub<G16|[1,7,8,3],[13,1,0,11],[13,10,12,9],[15,6,4,3]>;
/* 40.) 16.48.0.m.2 */ H1640:=sub<G16|[5,15,8,7],[7,0,8,7],[7,3,0,9],[15,4,12,7]>;
/* 41.) 16.48.0.n.1 */ H1641:=sub<G16|[9,3,4,7],[9,12,10,7],[15,5,6,5]>;
/* 42.) 16.48.0.q.1 */ H1642:=sub<G16|[3,5,0,13],[7,5,4,9],[7,6,12,3],[11,3,0,5]>;
/* 43.) 16.48.0.r.1 */ H1643:=sub<G16|[5,0,4,11],[5,1,8,9],[5,15,4,3],[11,11,12,13]>;
/* 44.) 16.48.0.t.1 */ H1644:=sub<G16|[5,11,2,15],[11,11,6,13],[13,9,12,11]>;
/* 45.) 16.48.0.t.2 */ H1645:=sub<G16|[1,8,14,7],[9,15,12,15],[13,13,4,3]>;
/* 46.) 16.48.0.u.1 */ H1646:=sub<G16|[1,11,0,3],[3,0,0,13],[9,5,0,7],[13,11,0,9]>;
/* 47.) 16.48.0.u.2 */ H1647:=sub<G16|[5,14,0,9],[9,2,0,3],[11,2,0,15],[13,3,0,5]>;
/* 48.) 16.48.0.v.1 */ H1648:=sub<G16|[1,9,0,15],[7,11,0,9],[9,3,0,5],[9,12,0,15],[15,6,0,15]>;
/* 49.) 16.48.0.v.2 */ H1649:=sub<G16|[3,6,0,15],[5,10,0,15],[11,7,0,9],[13,3,0,7],[13,8,0,7]>;
/* 50.) 16.48.0.x.1 */ H1650:=sub<G16|[3,7,0,1],[5,5,0,1],[5,9,0,7],[11,3,0,13]>;
/* 51.) 16.48.0.x.2 */ H1651:=sub<G16|[7,15,0,5],[11,11,0,13],[13,11,0,3],[15,0,0,9]>;
/* 52.) 16.48.0.y.1 */ H1652:=sub<G16|[9,7,0,7],[9,12,8,5],[11,15,8,15],[13,9,8,9]>;
/* 53.) 16.48.0.y.2 */ H1653:=sub<G16|[1,6,8,11],[3,1,0,3],[9,15,8,13],[13,9,0,13]>;
/* 54.) 16.48.0.z.1 */ H1654:=sub<G16|[1,0,8,5],[7,4,8,3],[11,1,0,9],[11,13,8,5]>;
/* 55.) 16.48.0.z.2 */ H1655:=sub<G16|[3,2,8,9],[7,3,0,9],[7,10,0,1],[9,6,0,7]>;
/* 56.) 16.24.1.f.1 */ H1656:=sub<G16|[5,2,8,9],[5,9,8,11],[7,7,10,9],[9,11,2,11]>;
/* 57.) 16.24.1.f.2 */ H1657:=sub<G16|[1,3,10,3],[3,3,2,13],[7,5,12,1],[15,12,14,9]>;
/* 58.) 16.24.1.h.1 */ H1658:=sub<G16|[11,8,6,1],[13,7,0,3],[15,3,4,1],[15,11,6,1]>;
/* 59.) 16.24.1.h.2 */ H1659:=sub<G16|[1,2,0,9],[1,2,2,15],[3,14,2,1],[13,11,6,15]>;
/* 60.) 16.24.1.l.1 */ H1660:=sub<G16|[1,2,8,7],[1,15,2,11],[3,6,4,15],[7,4,8,3]>;
/* 61.) 16.24.1.n.1 */ H1661:=sub<G16|[5,11,0,15],[5,12,4,1],[7,13,14,1],[15,14,0,3]>;
/* 62.) 16.24.1.n.2 */ H1662:=sub<G16|[5,4,4,9],[7,10,0,11],[7,14,10,1],[13,7,0,7]>;
/* 63.) 16.48.1.bg.1 */ H1663:=sub<G16|[3,11,10,5],[11,10,12,15],[13,9,12,15]>;
/* 64.) 16.48.1.bl.1 */ H1664:=sub<G16|[3,9,6,5],[3,14,14,13],[11,4,14,5],[11,9,0,5]>;
/* 65.) 16.48.1.bn.1 */ H1665:=sub<G16|[1,13,14,7],[5,5,0,11],[9,0,6,15],[15,10,10,1]>;
/* 66.) 16.48.1.bq.1 */ H1666:=sub<G16|[1,9,6,7],[3,4,0,11],[3,13,6,9],[5,5,0,11]>;
/* 67.) 16.48.1.bs.1 */ H1667:=sub<G16|[1,3,2,3],[1,6,2,15],[3,3,8,5],[9,15,12,15]>;
/* 68.) 16.48.1.bv.1 */ H1668:=sub<G16|[3,5,12,13],[9,10,2,7],[11,5,4,13],[13,5,4,15]>;
/* 69.) 16.48.1.ca.1 */ H1669:=sub<G16|[3,5,14,1],[9,3,12,7],[11,12,10,5],[13,13,0,11]>;
/* 70.) 16.48.1.cc.1 */ H1670:=sub<G16|[3,10,6,13],[5,1,8,11],[15,4,0,15],[15,14,4,3]>;
/* 71.) 16.48.1.cd.1 */ H1671:=sub<G16|[1,2,6,3],[5,11,8,11],[13,1,12,3]>;
/* 72.) 16.48.1.cf.1 */ H1672:=sub<G16|[1,9,6,15],[11,12,2,13],[11,12,14,1],[13,12,0,13]>;
/* 73.) 16.48.1.cg.1 */ H1673:=sub<G16|[3,4,12,7],[7,1,4,9],[7,10,6,1],[9,4,0,9]>;
/* 74.) 16.48.1.ch.1 */ H1674:=sub<G16|[1,4,4,5],[5,5,4,11],[13,0,10,7],[15,4,14,5]>;
/* 75.) 16.48.1.cr.1 */ H1675:=sub<G16|[9,4,6,7],[9,12,2,11],[13,7,12,7]>;
/* 76.) 16.48.1.cs.1 */ H1676:=sub<G16|[11,14,2,5],[13,11,14,3],[15,4,2,9],[15,4,8,15]>;
/* 77.) 16.48.1.ct.1 */ H1677:=sub<G16|[5,8,10,15],[5,9,10,11],[15,13,8,13]>;
/* 78.) 16.48.1.cx.1 */ H1678:=sub<G16|[1,11,2,13],[5,13,6,7],[7,8,0,7],[15,4,8,3]>;
/* 79.) 16.48.1.cx.2 */ H1679:=sub<G16|[3,15,10,1],[5,2,12,9],[5,15,10,9],[9,12,8,1]>;
/* 80.) 16.48.1.dc.1 */ H1680:=sub<G16|[1,3,12,11],[3,13,12,9],[5,14,0,1],[5,14,6,3]>;
/* 81.) 16.48.1.de.1 */ H1681:=sub<G16|[1,4,8,1],[3,1,8,13],[5,6,6,7],[7,1,4,9]>;
/* 82.) 16.48.1.df.1 */ H1682:=sub<G16|[7,0,4,11],[9,4,2,11],[13,0,10,7],[15,3,10,1]>;

/* 1.) 16.16.0.a.1, with Chinese remainder theorem */ X161:=sub<GLeftRight|[3+16,3,14,5],[6+16,15,3,6+16]>;
/* 2.) 16.16.0.b.1, with Chinese remainder theorem */ X162:=sub<GLeftRight|[0,9+16,3+16,4],[7,8,13,9]>;
/* 3.) 16.24.0.a.1, with Chinese remainder theorem */ X163:=sub<GLeftRight|[3+16,11,0,5],[3,14,14,11],[15+16,12,0,15+16]>;
/* 4.) 16.24.0.c.1, with Chinese remainder theorem */ X164:=sub<GLeftRight|[1,12,14,7],[7,3,4,15+16],[11,7,2,3]>;
/* 5.) 16.24.0.e.1, with Chinese remainder theorem */ X165:=sub<GLeftRight|[3+16,0,8,15+16],[9+16,4,0,15+16],[11,12,8,11],[11,13,8,15],[13,7,8,7]>;
/* 6.) 16.24.0.e.2, with Chinese remainder theorem */ X166:=sub<GLeftRight|[3+16,11,0,1],[5,13,0,15+16],[7,9,8,15+16],[13,1,0,13],[13,1,8,9]>;
/* 7.) 16.24.0.f.1, with Chinese remainder theorem */ X167:=sub<GLeftRight|[3+16,0,8,5],[3+16,5,0,5],[9+16,14,0,15+16],[15,1,8,5],[15+16,9,8,1]>;
/* 8.) 16.24.0.f.2, with Chinese remainder theorem */ X168:=sub<GLeftRight|[5,4,0,9+16],[7,14,8,9],[11,10,0,7],[13,6,0,3+16],[15+16,13,0,13]>;
/* 9.) 16.24.0.g.1, with Chinese remainder theorem */ X169:=sub<GLeftRight|[3+16,10,0,5],[7,6,0,1],[7,15,0,7],[7,15,0,13],[13,14,0,1]>;
/* 10.) 16.24.0.h.1, with Chinese remainder theorem */ X1610:=sub<GLeftRight|[3+16,15,0,5],[5,1,0,5],[11,5,8,9],[11,14,0,13],[13,6,0,11]>;
/* 11.) 16.24.0.i.1, with Chinese remainder theorem */ X1611:=sub<GLeftRight|[5,1,12,11],[7,2+16,8,1],[7,3,4,3+16],[9+16,14,0,11]>;
/* 12.) 16.24.0.j.1, with Chinese remainder theorem */ X1612:=sub<GLeftRight|[3+16,5,12,5],[9+16,15,4,13],[11,7,4,1],[13,11,4+16,11]>;
/* 13.) 16.24.0.k.1, with Chinese remainder theorem */ X1613:=sub<GLeftRight|[5,11,4,3],[5,12,10,11],[9+16,12,12,1],[15,10,12+16,3]>;
/* 14.) 16.24.0.k.2, with Chinese remainder theorem */ X1614:=sub<GLeftRight|[3,4,14,13],[5,10,0,9+16],[7,5,0,5],[9+16,10,12,5]>;
/* 15.) 16.24.0.l.1, with Chinese remainder theorem */ X1615:=sub<GLeftRight|[7,2,8,11],[7,7,4,13+16],[7,7,4,13+16],[9,6+16,10,15],[9+16,9,10,11]>;
/* 16.) 16.24.0.l.2, with Chinese remainder theorem */ X1616:=sub<GLeftRight|[1,7,2,11+16],[3,8,4,3],[9,4,14,15],[11,15,6,1]>;
/* 17.) 16.24.0.m.1, with Chinese remainder theorem */ X1617:=sub<GLeftRight|[7,7,12,1],[7,11,6,9+16],[9+16,5,0,15+16],[11,14,10,9]>;
/* 18.) 16.24.0.m.2, with Chinese remainder theorem */ X1618:=sub<GLeftRight|[1,10,8,9],[5,1,12,11],[5,9,14,3+16],[15,1,14,13]>;
/* 19.) 16.24.0.n.1, with Chinese remainder theorem */ X1619:=sub<GLeftRight|[3+16,6,4,7],[7,5,14,5],[9,11,14,11],[15,3+16,8,1]>;
/* 20.) 16.24.0.n.2, with Chinese remainder theorem */ X1620:=sub<GLeftRight|[5,9,8,11],[15,4,6+16,13],[15,7,2,1],[15,14,14,9]>;
/* 21.) 16.24.0.o.1, with Chinese remainder theorem */ X1621:=sub<GLeftRight|[1,14,8,3],[11,1,6,5],[11,5,6,9+16],[15,9+16,14,7]>;
/* 22.) 16.24.0.o.2, with Chinese remainder theorem */ X1622:=sub<GLeftRight|[1,11,10,15],[3,13,14,5],[5,5,6,13],[7,5,6,11]>;
/* 23.) 16.24.0.p.1, with Chinese remainder theorem */ X1623:=sub<GLeftRight|[3,5,10,5],[3,10,4,3],[9+16,12,14,7],[11,14,0,7]>;
/* 24.) 16.24.0.p.2, with Chinese remainder theorem */ X1624:=sub<GLeftRight|[3+16,0,10,5],[9,5,8,7],[9,11,14,7],[13,5,12,3+16]>;
/* 25.) 16.48.0.a.1, with Chinese remainder theorem */ X1625:=sub<GLeftRight|[9+16,0,4,9+16],[11,12,10,5],[11,14,6,5],[15+16,0,0,15+16]>;
/* 26.) 16.48.0.bb.1, with Chinese remainder theorem */ X1626:=sub<GLeftRight|[1,10,0,15+16],[3+16,3,8,7],[9,4,8,13],[15,6+16,8,13]>;
/* 27.) 16.48.0.bb.2, with Chinese remainder theorem */ X1627:=sub<GLeftRight|[1,7,8+16,11],[5,1,0,13],[5,2,8,9],[7,12,0,1]>;
/* 28.) 16.48.0.c.1, with Chinese remainder theorem */ X1628:=sub<GLeftRight|[3,2,4,7],[5,4,12,9+16],[5,10,0,5],[9+16,8,6,7]>;
/* 29.) 16.48.0.c.2, with Chinese remainder theorem */ X1629:=sub<GLeftRight|[7,0,2,9+16],[11,12,0,11],[15,2,6+16,9],[15,14,8,7]>;
/* 30.) 16.48.0.d.1, with Chinese remainder theorem */ X1630:=sub<GLeftRight|[3+16,0,8,1],[5,8,0,11],[11,10,8,3],[15+16,0,8,9+16],[15+16,6,0,5]>;
/* 31.) 16.48.0.d.2, with Chinese remainder theorem */ X1631:=sub<GLeftRight|[1,14,0,5],[5,6,8,15+16],[11,10,8,3],[13,0,8,15+16],[15+16,6,0,3+16]>;
/* 32.) 16.48.0.e.1, with Chinese remainder theorem */ X1632:=sub<GLeftRight|[1,14,0,3+16],[5,4,8,15],[13,5,8,3],[15+16,15,0,3+16]>;
/* 33.) 16.48.0.h.1, with Chinese remainder theorem */ X1633:=sub<GLeftRight|[3,14,2,5],[7,7,6,9+16],[9+16,7,0,15+16]>;
/* 34.) 16.48.0.h.2, with Chinese remainder theorem */ X1634:=sub<GLeftRight|[5+16,14,14,11],[11,9,8,13],[13,13,2+16,11]>;
/* 35.) 16.48.0.i.1, with Chinese remainder theorem */ X1635:=sub<GLeftRight|[1,6,10,7],[9,13,10,15],[11,14,0,11]>;
/* 36.) 16.48.0.j.1, with Chinese remainder theorem */ X1636:=sub<GLeftRight|[1,8,0,13],[1,10,0,9+16],[13,0,8,13],[13,5,8,11],[15+16,3,0,1]>;
/* 37.) 16.48.0.l.1, with Chinese remainder theorem */ X1637:=sub<GLeftRight|[1,1,0,3+16],[3,1,8,7],[3,6+16,8,11],[5,3,8,9+16]>;
/* 38.) 16.48.0.l.2, with Chinese remainder theorem */ X1638:=sub<GLeftRight|[3,7,8,7],[5,0,0,11],[5,8,8,13],[9,13,8,11]>;
/* 39.) 16.48.0.m.1, with Chinese remainder theorem */ X1639:=sub<GLeftRight|[1,7,8,3],[13,1,0,11],[13,10,12,9+16],[15,6+16,4,3]>;
/* 40.) 16.48.0.m.2, with Chinese remainder theorem */ X1640:=sub<GLeftRight|[5,15,8,7],[7,0,8,7],[7,3,0,9+16],[15+16,4,12,7]>;
/* 41.) 16.48.0.n.1, with Chinese remainder theorem */ X1641:=sub<GLeftRight|[9,3+16,4,7],[9+16,12,10,7],[15,5,6+16,5]>;
/* 42.) 16.48.0.q.1, with Chinese remainder theorem */ X1642:=sub<GLeftRight|[3+16,5,0,13],[7,5,4,9],[7,6,12,3+16],[11,3,0,5]>;
/* 43.) 16.48.0.r.1, with Chinese remainder theorem */ X1643:=sub<GLeftRight|[5,0,4,11],[5,1,8,9],[5,15,4,3+16],[11,11,12,13]>;
/* 44.) 16.48.0.t.1, with Chinese remainder theorem */ X1644:=sub<GLeftRight|[5,11,2,15],[11,11,6,13],[13,9,12,11]>;
/* 45.) 16.48.0.t.2, with Chinese remainder theorem */ X1645:=sub<GLeftRight|[1,8,14+16,7],[9+16,15,12,15+16],[13,13,4,3]>;
/* 46.) 16.48.0.u.1, with Chinese remainder theorem */ X1646:=sub<GLeftRight|[1,11,0,3+16],[3+16,0,0,13],[9+16,5,0,7],[13,11,0,9+16]>;
/* 47.) 16.48.0.u.2, with Chinese remainder theorem */ X1647:=sub<GLeftRight|[5,14,0,9+16],[9+16,2,0,3+16],[11,2,0,15+16],[13,3,0,5]>;
/* 48.) 16.48.0.v.1, with Chinese remainder theorem */ X1648:=sub<GLeftRight|[1,9,0,15+16],[7,11,0,9+16],[9+16,3,0,5],[9+16,12,0,15+16],[15+16,6,0,15+16]>;
/* 49.) 16.48.0.v.2, with Chinese remainder theorem */ X1649:=sub<GLeftRight|[3+16,6,0,15+16],[5,10,0,15+16],[11,7,0,9+16],[13,3,0,7],[13,8,0,7]>;
/* 50.) 16.48.0.x.1, with Chinese remainder theorem */ X1650:=sub<GLeftRight|[3+16,7,0,1],[5,5,0,1],[5,9,0,7],[11,3,0,13]>;
/* 51.) 16.48.0.x.2, with Chinese remainder theorem */ X1651:=sub<GLeftRight|[7,15,0,5],[11,11,0,13],[13,11,0,3+16],[15+16,0,0,9+16]>;
/* 52.) 16.48.0.y.1, with Chinese remainder theorem */ X1652:=sub<GLeftRight|[9+16,7,0,7],[9+16,12,8,5],[11,15,8,15+16],[13,9,8,9+16]>;
/* 53.) 16.48.0.y.2, with Chinese remainder theorem */ X1653:=sub<GLeftRight|[1,6,8,11],[3+16,1,0,3+16],[9+16,15,8,13],[13,9,0,13]>;
/* 54.) 16.48.0.z.1, with Chinese remainder theorem */ X1654:=sub<GLeftRight|[1,0,8,5],[7,4,8,3],[11,1,0,9+16],[11,13,8,5]>;
/* 55.) 16.48.0.z.2, with Chinese remainder theorem */ X1655:=sub<GLeftRight|[3,2,8,9],[7,3,0,9+16],[7,10,0,1],[9+16,6,0,7]>;
/* 56.) 16.24.1.f.1, with Chinese remainder theorem */ X1656:=sub<GLeftRight|[5,2,8,9],[5,9,8,11],[7,7,10,9],[9,11,2,11]>;
/* 57.) 16.24.1.f.2, with Chinese remainder theorem */ X1657:=sub<GLeftRight|[1,3,10,3+16],[3+16,3,2,13],[7,5,12,1],[15,12+16,14,9]>;
/* 58.) 16.24.1.h.1, with Chinese remainder theorem */ X1658:=sub<GLeftRight|[11,8,6,1],[13,7,0,3+16],[15+16,3,4,1],[15+16,11,6,1]>;
/* 59.) 16.24.1.h.2, with Chinese remainder theorem */ X1659:=sub<GLeftRight|[1,2,0,9+16],[1,2,2,15],[3,14,2,1],[13,11,6+16,15]>;
/* 60.) 16.24.1.l.1, with Chinese remainder theorem */ X1660:=sub<GLeftRight|[1,2+16,8,7],[1,15,2,11],[3,6+16,4,15],[7,4,8,3]>;
/* 61.) 16.24.1.n.1, with Chinese remainder theorem */ X1661:=sub<GLeftRight|[5,11,0,15+16],[5,12,4,1],[7,13,14,1],[15+16,14,0,3+16]>;
/* 62.) 16.24.1.n.2, with Chinese remainder theorem */ X1662:=sub<GLeftRight|[5,4,4,9],[7,10,0,11],[7,14,10,1],[13,7,0,7]>;
/* 63.) 16.48.1.bg.1, with Chinese remainder theorem */ X1663:=sub<GLeftRight|[3,11,10,5],[11,10,12,15+16],[13,9,12,15+16]>;
/* 64.) 16.48.1.bl.1, with Chinese remainder theorem */ X1664:=sub<GLeftRight|[3+16,9,6,5],[3,14,14,13],[11,4,14,5],[11,9,0,5]>;
/* 65.) 16.48.1.bn.1, with Chinese remainder theorem */ X1665:=sub<GLeftRight|[1,13,14,7],[5,5,0,11],[9+16,0,6,15+16],[15,10,10,1]>;
/* 66.) 16.48.1.bq.1, with Chinese remainder theorem */ X1666:=sub<GLeftRight|[1,9,6,7],[3+16,4,0,11],[3,13,6+16,9],[5,5,0,11]>;
/* 67.) 16.48.1.bs.1, with Chinese remainder theorem */ X1667:=sub<GLeftRight|[1,3,2,3+16],[1,6,2,15+16],[3+16,3,8,5],[9+16,15,12,15+16]>;
/* 68.) 16.48.1.bv.1, with Chinese remainder theorem */ X1668:=sub<GLeftRight|[3+16,5,12,13],[9,10,2,7],[11,5+16,4,13],[13,5,4,15]>;
/* 69.) 16.48.1.ca.1, with Chinese remainder theorem */ X1669:=sub<GLeftRight|[3,5,14,1],[9+16,3,12,7],[11,12,10,5],[13,13,0,11]>;
/* 70.) 16.48.1.cc.1, with Chinese remainder theorem */ X1670:=sub<GLeftRight|[3+16,10,6,13],[5,1,8,11],[15+16,4,0,15+16],[15,14,4,3]>;
/* 71.) 16.48.1.cd.1, with Chinese remainder theorem */ X1671:=sub<GLeftRight|[1,2,6,3+16],[5,11+16,8,11],[13,1,12,3+16]>;
/* 72.) 16.48.1.cf.1, with Chinese remainder theorem */ X1672:=sub<GLeftRight|[1,9,6,15+16],[11,12,2,13],[11,12,14,1],[13,12,0,13]>;
/* 73.) 16.48.1.cg.1, with Chinese remainder theorem */ X1673:=sub<GLeftRight|[3+16,4,12,7],[7,1,4,9],[7,10,6,1],[9+16,4,0,9+16]>;
/* 74.) 16.48.1.ch.1, with Chinese remainder theorem */ X1674:=sub<GLeftRight|[1,4,4,5],[5,5,4,11],[13,0,10,7],[15,4,14,5]>;
/* 75.) 16.48.1.cr.1, with Chinese remainder theorem */ X1675:=sub<GLeftRight|[9,4,6+16,7],[9+16,12,2,11],[13,7,12,7]>;
/* 76.) 16.48.1.cs.1, with Chinese remainder theorem */ X1676:=sub<GLeftRight|[11,14,2,5+16],[13,11,14,3],[15,4,2,9],[15,4,8,15]>;
/* 77.) 16.48.1.ct.1, with Chinese remainder theorem */ X1677:=sub<GLeftRight|[5,8,10,15],[5,9,10,11],[15,13,8,13]>;
/* 78.) 16.48.1.cx.1, with Chinese remainder theorem */ X1678:=sub<GLeftRight|[1,11,2+16,13],[5,13,6,7],[7,8,0,7],[15,4,8,3]>;
/* 79.) 16.48.1.cx.2, with Chinese remainder theorem */ X1679:=sub<GLeftRight|[3+16,15,10,1],[5,2,12,9+16],[5,15,10,9+16],[9+16,12,8,1]>;
/* 80.) 16.48.1.dc.1, with Chinese remainder theorem */ X1680:=sub<GLeftRight|[1,3,12,11],[3,13,12+16,9],[5,14,0,1],[5,14,6,3+16]>;
/* 81.) 16.48.1.de.1, with Chinese remainder theorem */ X1681:=sub<GLeftRight|[1,4,8,1],[3,1,8,13],[5,6,6,7],[7,1,4,9]>;
/* 82.) 16.48.1.df.1, with Chinese remainder theorem */ X1682:=sub<GLeftRight|[7,0,4,11],[9,4,2,11],[13,0,10,7],[15+16,3,10,1]>;

LeftGroups:=
[
X161,X162,X163,X164,X165,X166,X167,X168,X169,X1610,
X1611,X1612,X1613,X1614,X1615,X1616,X1617,X1618,X1619,X1620,
X1621,X1622,X1623,X1624,X1625,X1626,X1627,X1628,X1629,X1630,
X1631,X1632,X1633,X1634,X1635,X1636,X1637,X1638,X1639,X1640,
X1641,X1642,X1643,X1644,X1645,X1646,X1647,X1648,X1649,X1650,
X1651,X1652,X1653,X1654,X1655,X1656,X1657,X1658,X1659,X1660,
X1661,X1662,X1663,X1664,X1665,X1666,X1667,X1668,X1669,X1670,
X1671,X1672,X1673,X1674,X1675,X1676,X1677,X1678,X1679,X1680,
X1681,X1682
];

X91:=sub<GLeftRight|[0,2+9,4+9,0],[1,1,4,5],[1,0,0,2+9]>; /* 9.9.0.1, 9.9.0.a.1, with Chinese remainder theorem */
X92:=sub<GLeftRight|[1,1,0,1],[2+9,0,0,5],[1,0,0,2+9]>; /* 9.12.0.1, 9.12.0.a.1, with Chinese remainder theorem */
X93:=sub<GLeftRight|[2+9,0,0,5],[4,2+9,3,4],[1,0,0,2+9]>; /* 9.12.0.2, 9.12.0.b.1, with Chinese remainder theorem */
X94:=sub<GLeftRight|[2+9,0,0,5],[1,3+9,3,1],[0,2+9,4+9,0],[1,0,0,2+9]>; /* 9.18.0.2, 9.18.0.d.1, with Chinese remainder theorem */
X95:=sub<GLeftRight|[1,3,0,1],[2,1,1,1],[4+9,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1, with Chinese remainder theorem */
X96:=sub<GLeftRight|[0,2+9,4+9,1],[4,3,5,4],[4+9,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1, with Chinese remainder theorem */
X97:=sub<GLeftRight|[0,4+9,2+9,3],[5,1,1,4],[5,3,0,4+9]>; /* 9.27.0.2, 9.27.0.b.1, with Chinese remainder theorem */
X98:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[1,0,2,2+9]>; /* 9.36.0.2, 9.36.0.b.1, with Chinese remainder theorem */
X99:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[2+9,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1, with Chinese remainder theorem */
X910:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[4+9,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1, with Chinese remainder theorem*/
X911:=sub<GLeftRight|[2+9,1,0,5],[1,2,3,2+9]>; /* 9.36.0.5, 9.36.0.d.2, with Chinese remainder theorem */
X912:=sub<GLeftRight|[2+9,1,0,5],[4+9,0,3,5]>; /* 9.36.0.6, 9.36.e.1, with Chinese remainder theorem */
X913:=sub<GLeftRight|[2+9,2,0,5],[2+9,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1, with Chinese remainder theorem */
X914:=sub<GLeftRight|[1,3,0,1],[2,2+9,3,8],[1,2,0,2+9]>; /* 9.36.0.7, 9.36.0.f.2, with Chinese remainder theorem */
X915:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8+9],[2+9,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1, with Chinese remainder theorem */
X916:=sub<GLeftRight|[1,3,0,1],[5,2,3,5],[4+9,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1, with Chinese remainder theorem */

RightGroups:=[
X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,
X911,X912,X913,X914,X915,X916
];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no hits

/* level 32*3 */

ANSWERS:={};

Left:=32;
Right:=3;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X321:=sub<GLeftRight|[1,4,0,1],[15+32,0,0,15+32],[7,0,0,23],[1,0,4,1],[3+32,0,0,5],[2,3+32,1,0]>; /* 32.48.0.18, 32.48.0.c.1, with Chinese remainder theorem */
X322:=sub<GLeftRight|[1,2,0,1],[15+32,0,0,15+32],[7,0,0,23],[3+32,0,8,11],[3+32,1,0,5],[5,2,2,5+32]>; /* 32.48.0.21, 32.48.0.a.1, with Chinese remainder theorem */
X323:=sub<GLeftRight|[3+32,8,0,11],[5,8,0,13],[0,7,9+32,2],[1,4,0,5],[5,6,0,3+32]>; /* 32.48.0.11, 32.48.0.f.1, with Chinese remainder theorem */
X324:=sub<GLeftRight|[3+32,8,0,11],[5,8,0,13],[0,7,9+32,2],[5,2,0,3+32],[5,4,0,1]>; /* 32.48.0.1, 32.48.0.e.1, with Chinese remainder theorem */
X325:=sub<GLeftRight|[3+32,8,0,11],[5,8,0,13],[0,7,9+32,2],[7,2,0,1],[9+32,2,0,3+32]>; /* 32.48.0.12, 32.48.0.f.2, with Chinese remainder theorem */
X326:=sub<GLeftRight|[3+32,8,0,11],[5,8,0,13],[0,7,9+32,2],[7,2,0,5],[7,4,0,3+32]>; /* 32.48.0.8, 32.48.0.e.2, with Chinese remainder theorem */
X327:=sub<GLeftRight|[3+32,4,0,11],[6,3+32,7,9],[3+32,3,0,5],[0,3+32,1,0]>; /* 32.32.0.2, 32.32.0.a.1, with Chinese remainder theorem */
X328:=sub<GLeftRight|[3+32,4,0,11],[6,3+32,7,9],[5,5,0,3+32],[0,3+32,1,0]>; /* 32.32.0.1, 32.32.0.b.1, with Chinese remainder theorem */

LeftGroups:=[
X321,X322,X323,X324,X325,X326,X327,X328
];

X31:=sub<GLeftRight|[0,1,2+3,0],[1,1,1,2],[1,0,0,2+3]>; /* with Chinese remainder theorem */
X32:=sub<GLeftRight|[0,1,2+3,1],[1,2,0,2+3]>; /* with Chinese remainder theorem */
X33:=sub<GLeftRight|[0,1,2+3,0],[1,0,0,2+3]>; /* with Chinese remainder theorem */
X34:=sub<GLeftRight|[2+3,0,0,2+3],[1,0,0,2+3]>; /* with Chinese remainder theorem */

RightGroups:=[X31,X32,X33,X34];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no hits

/* level 8*9 */

ANSWERS89:={};

Left:=8;
Right:=9;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X81:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,0,0,3+8],[1,1,0,5]>; /* 8.2.0.1, 8.2.0.a.1 */
X82:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+8],[1,1,0,5]>; /* 8.2.0.2, 8.2.0.b.1 */
X83:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.6.0.5, 8.6.0.a.1 */
X84:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,1,0,3+8],[1,1,0,5]>; /* 8.6.0.6, 8.6.0.b.1 */
X85:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.1, 8.6.0.c.1 */
X86:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.4, 8.6.0.d.1 */
X87:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.2, 8.6.0.f.1 */
X88:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.3, 8.6.0.e.1 */
X89:=sub<GLeftRight|[1,4,0,1],[2,1,5,3],[3+8,3,0,5],[0,1,3+8,0]>; /* 8.8.0.1, 8.8.0.a.1 */
X810:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[0,1,1,0]>; /* 8.12.0.35, 8.12.0.f.1 */
X811:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[1,2,0,5]>; /* 8.12.0.3, 8.12.0.a.1 */
X812:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[0,1,1,0]>; /* 8.12.0.16, 8.12.0.d.1 */
X813:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.12.0.4, 8.12.0.b.1 */
X814:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,5],[0,1,1,0]>; /* 8.12.0.39, 8.12.0.g.1 */
X815:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[0,1,3+8,2]>; /* 8.12.0.26, 8.12.0.h.1 */
X816:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[2,1,1,2+8]>; /* 8.12.0.36, 8.12.0.l.1 */
X817:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[0,1,3+8,0]>; /* 8.12.0.19, 8.12.0.i.1 */
X818:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[2,1,1,2+8]>; /* 8.12.0.15, 8.12.0.k.1 */
X819:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[1,0,0,3+8],[1+8,2,2,1]>; /* 8.12.0.28, 8.12.0.t.1 */
X820:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.12.0.29, 8.12.0.s.1 */
X821:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[0,1,3+8,0],[2,1,5,2]>; /* 8.24.0.37, 8.24.0.m.1 */
X822:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.24.0.80, 8.24.0.n.1 */
X823:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.22, 8.24.0.c.1 */
X824:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,2,0,5],[3+8,0,2,5]>; /* 8.24.0.31, 8.24.0.a.1 */
X825:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,2,0,5]>; /* 8.24.0.74, 8.24.0.t.1 */
X826:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,3,2,3+8]>; /* 8.24.0.81, 8.24.0.v.1 */
X827:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.34, 8.12.0.z.1 */
X828:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.30, 8.12.0.y.1 */
X829:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.18, 8.12.0.x.1 */
X830:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.17, 8.12.0.w.1 */
X831:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,0,0,5]>; /* 8.12.0.9, 8.12.0.p.1 */
X832:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,4,0,5]>; /* 8.12.0.10, 8.12.0.o.1 */
X833:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.11, 8.12.0.m.1 */
X834:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.5, 8.12.0.n.1 */
X835:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.31, 8.12.0.v.1 */
X836:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.33, 8.12.0.u.1 */
X837:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.12.0.32, 8.12.0.q.1 */
X838:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.12.0.27, 8.12.0.r.1 */
X839:=sub<GLeftRight|[1,1,1,2],[0,3+8,5,0],[3+8,3,0,5],[2,1,1,3]>; /* 8.16.0.1, 8.16.0.a.1 */
X840:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.23, 8.24.0.i.1 */
X841:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.24.0.25, 8.24.0.h.1 */
X842:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,1,0,5]>; /* 8.24.0.99, 8.24.0.k.1 */
X843:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,5],[3+8,0,2,1]>; /* 8.24.0.35, 8.24.0.g.1 */
X844:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,2,3+8],[3,2,2,1]>; /* 8.24.0.36, 8.24.0.f.1 */
X845:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1,0,0,5]>; /* 8.24.0.67, 8.24.0.q.1 */
X846:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1+8,1,4,1]>; /* 8.24.0.100, 8.24.0.r.1 */
X847:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[3,2,2,1]>; /* 8.24.0.130, 8.24.0.s.1 */
X848:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,3,2,3+8],[3,2,2,1]>; /* 8.24.0.137, 8.24.0.z.1 */
X849:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,0,0,5],[1+8,1,4,1]>; /* 8.24.0.115, 8.24.0.y.1 */
X850:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[1,0,4,5]>; /* 8.24.0.70, 8.24.0.x.1 */
X851:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[3+8,0,2,1]>; /* 8.24.0.129, 8.24.0.o.1 */
X852:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.83, 8.24.0.bt.1 */
X853:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,2,2,3]>; /* 8.24.0.131, 8.24.0.bp.1 */
X854:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.24.0.82, 8.24.0.bn.1 */
X855:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,5],[1,2,2,3]>; /* 8.24.0.41, 8.24.0.bs.1 */
X856:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.24.0.84, 8.24.0.bh.1 */
X857:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1+8,2,2,1]>; /* 8.24.0.127, 8.24.0.bj.1 */
X858:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.24.0.79, 8.24.0.bf.1 */
X859:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,5],[2,1,1,2+8]>; /* 8.24.0.39, 8.24.0.be.1 */
X860:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.24.0.128, 8.24.0.bi.1 */
X861:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[2,3,5,2]>; /* 8.24.0.134, 8.24.0.bo.1 */
X862:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[1+8,2,2,1]>; /* 8.24.0.136, 8.24.0.bq.1 */
X863:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[2,1,1,2+8]>; /* 8.24.0.135, 8.24.0.bc.1 */
X864:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[1,4,0,5],[1,6,0,3+8]>; /* 8.24.0.90, 8.24.0.bb.2 */
X865:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.24.0.91, 8.24.0.ba.2 */
X866:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[5,4,0,1]>; /* 8.24.0.88, 8.24.0.bb.1 */
X867:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[5,2,0,3+8],[5,4,0,1]>; /* 8.24.0.92, 8.24.0.ba.1 */
X868:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.15, 8.24.0.d.1 */
X869:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.18, 8.24.0.e.1 */
X870:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.24.0.10, 8.24.0.e.2 */
X871:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.24.0.13, 8.24.0.d.2 */
X872:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[1,2,0,3+8],[1,4,0,5]>; /* 8.24.0.122, 8.24.0.bl.2 */
X873:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[5,4,0,1],[3+8,6,0,1]>; /* 8.24.0.119, 8.24.0.bl.1 */
X874:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.44, 8.48.0.b.2 */
X875:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.96, 8.48.0.f.1 */
X876:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[3+8,2,0,5]>; /* 8.48.0.50, 8.48.0.b.1 */
X877:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,0,2,5]>; /* 8.48.0.88, 8.48.0.e.2 */
X878:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,2,0,5]>; /* 8.48.0.137, 8.48.0.e.1 */
X879:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[5,0,0,1]>; /* 8.48.0.45, 8.48.0.c.1 */
X880:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.48.0.97, 8.48.0.i.1 */
X881:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,5],[1,0,4,3+8]>; /* 8.48.0.98, 8.48.0.l.2 */
X882:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.91, 8.48.0.k.2 */
X883:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.123, 8.48.0.k.1 */
X884:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,5],[1,2,4,3]>; /* 8.48.0.144, 8.48.0.l.1 */
X885:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,0,0,5]>; /* 8.48.0.197, 8.48.0.n.2 */
X886:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,2,0,5]>; /* 8.48.0.199, 8.48.0.n.1 */
X887:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,3,4,1]>; /* 8.48.0.217, 8.48.0.p.1 */
X888:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,0,0,5],[1,2,4,3]>; /* 8.48.0.138, 8.48.0.h.1 */
X889:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,2,0,5],[1,0,4,3+8]>; /* 8.48.0.89, 8.48.0.h.2 */
X890:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1,0,4,3+8]>; /* 8.48.0.218, 8.48.0.m.1 */
X891:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1+8,1,4,1]>; /* 8.48.0.224 , 8.48.0.m.2 */
X892:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[1,4,0,5]>; /* 8.48.0.204, 8.48.0.q.2 */
X893:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[5,4,0,1]>; /* 8.48.0.203, 8.48.0.q.1 */

LeftGroups:=[
X81,X82,X83,X84,X85,X86,X87,X88,X89,X810,
X811,X812,X813,X814,X815,X816,X817,X818,X819,X820,
X821,X822,X823,X824,X825,X826,X827,X828,X829,X830,
X831,X832,X833,X834,X835,X836,X837,X838,X839,X840,
X841,X842,X843,X844,X845,X846,X847,X848,X849,X850,
X851,X852,X853,X854,X855,X856,X857,X858,X859,X860,
X861,X862,X863,X864,X865,X866,X867,X868,X869,X870,
X871,X872,X873,X874,X875,X876,X877,X878,X879,X880,
X881,X882,X883,X884,X885,X886,X887,X888,X889,X890,
X891,X892,X893
];

X91:=sub<GLeftRight|[0,2+9,4+9,0],[1,1,4,5],[1,0,0,2+9]>; /* 9.9.0.1, 9.9.0.a.1 */
X92:=sub<GLeftRight|[1,1,0,1],[2+9,0,0,5],[1,0,0,2+9]>; /* 9.12.0.1, 9.12.0.a.1 */
X93:=sub<GLeftRight|[2+9,0,0,5],[4,2+9,3,4],[1,0,0,2+9]>; /* 9.12.0.2, 9.12.0.b.1 */
X94:=sub<GLeftRight|[2+9,0,0,5],[1,3+9,3,1],[0,2+9,4+9,0],[1,0,0,2+9]>; /* 9.18.0.2, 9.18.0.d.1 */
X95:=sub<GLeftRight|[1,3,0,1],[2,1,1,1],[4+9,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
X96:=sub<GLeftRight|[0,2+9,4+9,1],[4,3,5,4],[4+9,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1 */
X97:=sub<GLeftRight|[0,4+9,2+9,3],[5,1,1,4],[5,3,0,4+9]>; /* 9.27.0.2, 9.27.0.b.1 */
X98:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[1,0,2,2+9]>; /* 9.36.0.2, 9.36.0.b.1 */
X99:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[2+9,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
X910:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[4+9,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
X911:=sub<GLeftRight|[2+9,1,0,5],[1,2,3,2+9]>; /* 9.36.0.5, 9.36.0.d.2 */
X912:=sub<GLeftRight|[2+9,1,0,5],[4+9,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
X913:=sub<GLeftRight|[2+9,2,0,5],[2+9,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
X914:=sub<GLeftRight|[1,3,0,1],[2,2+9,3,8],[1,2,0,2+9]>; /* 9.36.0.7, 9.36.0.f.2 */
X915:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8+9],[2+9,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
X916:=sub<GLeftRight|[1,3,0,1],[5,2,3,5],[4+9,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */

RightGroups:=[
X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,
X911,X912,X913,X914,X915,X916
];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS89:=ANSWERS89 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS89; // 8 hits
ANSWERS89:=[x:x in ANSWERS89];
A1:=sub<GLeftRight|[3,5,1,44],[8,3,63,32],[45,56,20,69],[60,5,7,26]>; // 72.24.1.b.1
IsConjugate(GLeftRight,A1,ANSWERS89[1][3]);
A2:=sub<GLeftRight|[3,68,34,41],[14,21,17,22],[34,69,19,26],[37,24,16,53],[61,8,28,45]>; // 72.72.1.a.1
IsConjugate(GLeftRight,A2,ANSWERS89[2][3]);
A3:=sub<GLeftRight|[1,3,0,7],[6,35,41,36],[13,35,36,53],[34,29,21,29]>; // 72.24.1.a.1
IsConjugate(GLeftRight,A3,ANSWERS89[3][3]);
A4:=sub<GLeftRight|[2,55,9,46],[3,26,13,59],[5,9,30,71],[65,46,50,63]>; // 72.24.0.a.1
IsConjugate(GLeftRight,A4,ANSWERS89[4][3]);
A5:=sub<GLeftRight|[5,68,6,1],[10,31,17,42],[46,33,65,2],[53,54,18,71],[70,9,15,28]>; // 72.72.1.d.1
IsConjugate(GLeftRight,A5,ANSWERS89[5][3]);
A6:=sub<GLeftRight|[41,12,2,7],[49,54,16,71],[55,38,18,29],[60,37,1,18],[64,23,69,14]>; // 72.72.1.b.1
IsConjugate(GLeftRight,A6,ANSWERS89[6][3]);
A7:=sub<GLeftRight|[10,65,7,66],[29,60,30,53],[44,51,65,55],[62,31,45,67]>; // 72.24.0.b.1
IsConjugate(GLeftRight,A7,ANSWERS89[7][3]);
A8:=sub<GLeftRight|[3,20,34,7],[24,49,47,26],[65,24,10,55],[67,52,32,33],[69,34,38,11]>; // 72.72.1.c.1
IsConjugate(GLeftRight,A8,ANSWERS89[8][3]);

// here we compute the equations of the modular curves of groups of level 72 and genus 1

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

M1:=CreateModularCurveRec(72,Generators(A1));
FindModelOfXG(M1,1); // EllipticCurve([0,-216]), rank 1
M2:=CreateModularCurveRec(72,Generators(A2));
FindModelOfXG(M2,1); // EllipticCurve([0,-8]), rank 0
M3:=CreateModularCurveRec(72,Generators(A3));
FindModelOfXG(M3,1); // EllipticCurve([0,216]), rank 0
M4:=CreateModularCurveRec(72,Generators(A4));
FindModelOfXG(M4,1); // genus 0
M5:=CreateModularCurveRec(72,Generators(A5));
FindModelOfXG(M5,1); // EllipticCurve([0,-8]), rank 0
M6:=CreateModularCurveRec(72,Generators(A6));
FindModelOfXG(M6,1); // EllipticCurve([0,8]), rank 0
M7:=CreateModularCurveRec(72,Generators(A7));
FindModelOfXG(M7,1); // genus 0
M8:=CreateModularCurveRec(72,Generators(A8));
FindModelOfXG(M8,1); // EllipticCurve([0,8]), rank 0


/* Level 4*9 */

ANSWERS49:={};

Left:=4;
Right:=9;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X41:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+4]>; /* 4.2.0.1, 4.2.0.a.1 */
X42:=sub<GLeftRight|[1,2,0,1],[3+4,0,0,3+4],[1,0,2,1],[1,1,0,3+4]>; /* 4.6.0.5, 4.6.0.a.1 */ 
X43:=sub<GLeftRight|[1,1,1,2],[0,1,3+4,0],[1,1,0,3+4]>; /* 4.4.0.1, 4.4.0.a.1 */
X44:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,0,0,3+4]>; /* 4.6.0.3, 4.6.0.b.1 */
X45:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,2,0,3+4]>; /* 4.6.0.1, 4.6.0.c.1 */
X46:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,0,0,3+4]>; /* 4.6.0.4, 4.6.0.e.1 */
X47:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,2,0,3+4]>; /* 4.6.0.2, 4.6.0.d.1 */
X48:=sub<GLeftRight|[2,1,1,3],[1,1,0,3+4]>; /* 4.8.0.2, 4.8.0.b.1 */
X49:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[0,1,1,0]>; /* 4.12.0.9, 4.12.0.d.1 */
X410:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,0,0,3+4]>; /* 4.12.0.4, 4.12.0.a.1 */

X411:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,2,0,3+4]>; /* 4.12.0.3, 4.12.0.b.1 */
X412:=sub<GLeftRight|[0,1,3+4,0],[1,0,0,3+4]>; /* 4.12.0.11, 4.12.0.f.1 */
X413:=sub<GLeftRight|[0,1,3+4,0],[2,1+4,1,2]>; /* 4.12.0.5, 4.12.0.e.1 */
X414:=sub<GLeftRight|[3+4,0,0,3+4],[1,0,0,3+4]>; /* 4.24.0.8, 4.24.0.b.1 */
X415:=sub<GLeftRight|[3+4,0,0,3+4],[1,3,0,3+4]>; /* 4.24.0.2, 4.24.0.c.1 */

LeftGroups:=[
X41,X42,X43,X44,X45,X46,X47,X48,X49,X410,
X411,X412,X413,X414,X415
];

X91:=sub<GLeftRight|[0,2+9,4+9,0],[1,1,4,5],[1,0,0,2+9]>; /* 9.9.0.1, 9.9.0.a.1 */
X92:=sub<GLeftRight|[1,1,0,1],[2+9,0,0,5],[1,0,0,2+9]>; /* 9.12.0.1, 9.12.0.a.1 */
X93:=sub<GLeftRight|[2+9,0,0,5],[4,2+9,3,4],[1,0,0,2+9]>; /* 9.12.0.2, 9.12.0.b.1 */
X94:=sub<GLeftRight|[2+9,0,0,5],[1,3+9,3,1],[0,2+9,4+9,0],[1,0,0,2+9]>; /* 9.18.0.2, 9.18.0.d.1 */
X95:=sub<GLeftRight|[1,3,0,1],[2,1,1,1],[4+9,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
X96:=sub<GLeftRight|[0,2+9,4+9,1],[4,3,5,4],[4+9,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1 */
X97:=sub<GLeftRight|[0,4+9,2+9,3],[5,1,1,4],[5,3,0,4+9]>; /* 9.27.0.2, 9.27.0.b.1 */
X98:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[1,0,2,2+9]>; /* 9.36.0.2, 9.36.0.b.1 */
X99:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[2+9,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
X910:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[4+9,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
X911:=sub<GLeftRight|[2+9,1,0,5],[1,2,3,2+9]>; /* 9.36.0.5, 9.36.0.d.2 */
X912:=sub<GLeftRight|[2+9,1,0,5],[4+9,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
X913:=sub<GLeftRight|[2+9,2,0,5],[2+9,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
X914:=sub<GLeftRight|[1,3,0,1],[2,2+9,3,8],[1,2,0,2+9]>; /* 9.36.0.7, 9.36.0.f.2 */
X915:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8+9],[2+9,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
X916:=sub<GLeftRight|[1,3,0,1],[5,2,3,5],[4+9,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */

RightGroups:=[
X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,
X911,X912,X913,X914,X915,X916
];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS49:=ANSWERS49 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS49; // 6 hits
ANSWERS49:=[x:x in ANSWERS49];
A1:=sub<GLeftRight|[11,7,18,31],[11,21,0,5],[13,21,0,7],[23,33,0,25],[31,15,0,5]>; // 36,72.1.19
IsConjugate(GLeftRight,A1,ANSWERS49[1][3]);
A2:=sub<GLeftRight|[11,1,12,1],[11,30,18,7],[13,32,6,17],[19,28,33,13]>; // 36.24.0.10
IsConjugate(GLeftRight,A2,ANSWERS49[2][3]);
A3:=sub<GLeftRight|[15,13,28,33],[19,10,29,25],[21,29,14,3],[35,28,31,13]>; // 36.36.1.1
IsConjugate(GLeftRight,A3,ANSWERS49[3][3]);
A4:=sub<GLeftRight|[4,3,27,8],[17,18,9,13],[28,27,27,28],[35,2,27,7]>; // 36.24.1.1
IsConjugate(GLeftRight,A4,ANSWERS49[4][3]);
A5:=sub<GLeftRight|[5,31,0,11],[11,19,0,31],[13,8,0,5],[13,30,0,7],[25,33,0,13]>; // 36.72.1.17
IsConjugate(GLeftRight,A5,ANSWERS49[5][3]);
A6:=sub<GLeftRight|[13,13,18,5],[17,25,0,13],[19,2,18,25],[25,1,0,25]>; // 36.72.1.18
IsConjugate(GLeftRight,A6,ANSWERS49[6][3]);

// here we compute the equations of the modular curves of level 36 and genus 1

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

M1:=CreateModularCurveRec(36,Generators(A1));
FindModelOfXG(M1,1); // EllipticCurve([0,-1]), rank 1
M2:=CreateModularCurveRec(36,Generators(A2));
FindModelOfXG(M2,1); // genus 0
M3:=CreateModularCurveRec(36,Generators(A3));
FindModelOfXG(M3,1); // EllipticCurve([-3,-14]), rank 1
M4:=CreateModularCurveRec(36,Generators(A4));
FindModelOfXG(M4,1); // EllipticCurve([0,27]), rank 0
M5:=CreateModularCurveRec(36,Generators(A5));
FindModelOfXG(M5,1); // EllipticCurve([0,1]), rank 0
M6:=CreateModularCurveRec(36,Generators(A6));
FindModelOfXG(M6,1); // EllipticCurve([0,-1]), rank 0

/* Level 2*9 */

G2:=GL(2,Integers(2));

ANSWERS29:={};

Left:=2;
Right:=9;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

H21:=sub<G2|[0,1,1,1]>; /* 2.2.0.1, 2.2.0.a.1 */
H22:=sub<G2|[0,1,1,0]>; /* 2.3.0.1, 2.3.0.a.1 */
H23:=sub<G2|[]>; /* 2.6.0.1, 2.6.0.a.1 */

LeftGroups:=[H21,H22,H23];

X91:=sub<GLeftRight|[0,2+9,4+9,0],[1,1,4,5],[1,0,0,2+9]>; /* 9.9.0.1, 9.9.0.a.1 */
X92:=sub<GLeftRight|[1,1,0,1],[2+9,0,0,5],[1,0,0,2+9]>; /* 9.12.0.1, 9.12.0.a.1 */
X93:=sub<GLeftRight|[2+9,0,0,5],[4,2+9,3,4],[1,0,0,2+9]>; /* 9.12.0.2, 9.12.0.b.1 */
X94:=sub<GLeftRight|[2+9,0,0,5],[1,3+9,3,1],[0,2+9,4+9,0],[1,0,0,2+9]>; /* 9.18.0.2, 9.18.0.d.1 */
X95:=sub<GLeftRight|[1,3,0,1],[2,1,1,1],[4+9,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
X96:=sub<GLeftRight|[0,2+9,4+9,1],[4,3,5,4],[4+9,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1 */
X97:=sub<GLeftRight|[0,4+9,2+9,3],[5,1,1,4],[5,3,0,4+9]>; /* 9.27.0.2, 9.27.0.b.1 */
X98:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[1,0,2,2+9]>; /* 9.36.0.2, 9.36.0.b.1 */
X99:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[2+9,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
X910:=sub<GLeftRight|[1,3,0,1],[5,0,3,2+9],[4+9,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
X911:=sub<GLeftRight|[2+9,1,0,5],[1,2,3,2+9]>; /* 9.36.0.5, 9.36.0.d.2 */
X912:=sub<GLeftRight|[2+9,1,0,5],[4+9,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
X913:=sub<GLeftRight|[2+9,2,0,5],[2+9,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
X914:=sub<GLeftRight|[1,3,0,1],[2,2+9,3,8],[1,2,0,2+9]>; /* 9.36.0.7, 9.36.0.f.2 */
X915:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8+9],[2+9,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
X916:=sub<GLeftRight|[1,3,0,1],[5,2,3,5],[4+9,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */

RightGroups:=[
X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,
X911,X912,X913,X914,X915,X916
];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS29:=ANSWERS29 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS29; // 6 hits
ANSWERS29:=[x:x in ANSWERS29];

A1:=sub<GLeftRight|[11,2,0,17],[13,8,0,5]>; // 18.72.1.1
IsConjugate(GLeftRight,A1,ANSWERS29[1][3]);
A2:=sub<GLeftRight|[5,12,0,5],[5,14,0,1],[14,17,9,5]>; // 18.24.1.1
IsConjugate(GLeftRight,A2,ANSWERS29[2][3]);
A3:=sub<GLeftRight|[1,9,0,5],[9,14,8,9],[17,7,10,7]>; // 18.27.1.1
IsConjugate(GLeftRight,A3,ANSWERS29[3][3]);
A4:=sub<GLeftRight|[1,0,12,17],[13,3,0,13],[15,11,14,9]>; // 18.54.1.3
IsConjugate(GLeftRight,A4,ANSWERS29[4][3]);
A5:=sub<GLeftRight|[5,13,15,14],[11,8,12,11],[13,1,3,8]>; // 18.24.0.1
IsConjugate(GLeftRight,A5,ANSWERS29[5][3]);
A6:=sub<GLeftRight|[1,13,0,13],[5,7,0,7],[11,12,0,17]>; // 18.36.0.1
IsConjugate(GLeftRight,A6,ANSWERS29[6][3]);

// here we compute the equations of the modular curves of groups of genus 1 and level 18

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

M1:=CreateModularCurveRec(18,Generators(A1));
FindModelOfXG(M1,1); // EllipticCurve([0,1]), rank 0
M2:=CreateModularCurveRec(18,Generators(A2));
FindModelOfXG(M2,1); // EllipticCurve([0,-27]), rank 0
M3:=CreateModularCurveRec(18,Generators(A3));
FindModelOfXG(M3,1); // EllipticCurve([1,-1,1,4,-1]), rank 0
M4:=CreateModularCurveRec(18,Generators(A4));
FindModelOfXG(M4,1); // EllipticCurve([1,-1,1,-5,5]), rank 0
M5:=CreateModularCurveRec(18,Generators(A5));
FindModelOfXG(M5,1); // genus 0
M6:=CreateModularCurveRec(18,Generators(A6));
FindModelOfXG(M6,1); // EllipticCurve([0,-1]), rank 0

/* level 16*3 */

ANSWERS163:={};

Left:=16;
Right:=3;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

/* 1.) 16.16.0.a.1 */ X161:=sub<GLeftRight|[3+16,3,14,5],[6+16,15,3,6+16]>;
/* 2.) 16.16.0.b.1 */ X162:=sub<GLeftRight|[0,9+16,3+16,4],[7,8,13,9]>;
/* 3.) 16.24.0.a.1 */ X163:=sub<GLeftRight|[3+16,11,0,5],[3,14,14,11],[15+16,12,0,15+16]>;
/* 4.) 16.24.0.c.1 */ X164:=sub<GLeftRight|[1,12,14,7],[7,3,4,15+16],[11,7,2,3]>;
/* 5.) 16.24.0.e.1 */ X165:=sub<GLeftRight|[3+16,0,8,15+16],[9+16,4,0,15+16],[11,12,8,11],[11,13,8,15],[13,7,8,7]>;
/* 6.) 16.24.0.e.2 */ X166:=sub<GLeftRight|[3+16,11,0,1],[5,13,0,15+16],[7,9,8,15+16],[13,1,0,13],[13,1,8,9]>;
/* 7.) 16.24.0.f.1 */ X167:=sub<GLeftRight|[3+16,0,8,5],[3+16,5,0,5],[9+16,14,0,15+16],[15,1,8,5],[15+16,9,8,1]>;
/* 8.) 16.24.0.f.2 */ X168:=sub<GLeftRight|[5,4,0,9+16],[7,14,8,9],[11,10,0,7],[13,6,0,3+16],[15+16,13,0,13]>;
/* 9.) 16.24.0.g.1 */ X169:=sub<GLeftRight|[3+16,10,0,5],[7,6,0,1],[7,15,0,7],[7,15,0,13],[13,14,0,1]>;
/* 10.) 16.24.0.h.1 */ X1610:=sub<GLeftRight|[3+16,15,0,5],[5,1,0,5],[11,5,8,9],[11,14,0,13],[13,6,0,11]>;
/* 11.) 16.24.0.i.1 */ X1611:=sub<GLeftRight|[5,1,12,11],[7,2+16,8,1],[7,3,4,3+16],[9+16,14,0,11]>;
/* 12.) 16.24.0.j.1 */ X1612:=sub<GLeftRight|[3+16,5,12,5],[9+16,15,4,13],[11,7,4,1],[13,11,4+16,11]>;
/* 13.) 16.24.0.k.1 */ X1613:=sub<GLeftRight|[5,11,4,3],[5,12,10,11],[9+16,12,12,1],[15,10,12+16,3]>;
/* 14.) 16.24.0.k.2 */ X1614:=sub<GLeftRight|[3,4,14,13],[5,10,0,9+16],[7,5,0,5],[9+16,10,12,5]>;
/* 15.) 16.24.0.l.1 */ X1615:=sub<GLeftRight|[7,2,8,11],[7,7,4,13+16],[7,7,4,13+16],[9,6+16,10,15],[9+16,9,10,11]>;
/* 16.) 16.24.0.l.2 */ X1616:=sub<GLeftRight|[1,7,2,11+16],[3,8,4,3],[9,4,14,15],[11,15,6,1]>;
/* 17.) 16.24.0.m.1 */ X1617:=sub<GLeftRight|[7,7,12,1],[7,11,6,9+16],[9+16,5,0,15+16],[11,14,10,9]>;
/* 18.) 16.24.0.m.2 */ X1618:=sub<GLeftRight|[1,10,8,9],[5,1,12,11],[5,9,14,3+16],[15,1,14,13]>;
/* 19.) 16.24.0.n.1 */ X1619:=sub<GLeftRight|[3+16,6,4,7],[7,5,14,5],[9,11,14,11],[15,3+16,8,1]>;
/* 20.) 16.24.0.n.2 */ X1620:=sub<GLeftRight|[5,9,8,11],[15,4,6+16,13],[15,7,2,1],[15,14,14,9]>;
/* 21.) 16.24.0.o.1 */ X1621:=sub<GLeftRight|[1,14,8,3],[11,1,6,5],[11,5,6,9+16],[15,9+16,14,7]>;
/* 22.) 16.24.0.o.2 */ X1622:=sub<GLeftRight|[1,11,10,15],[3,13,14,5],[5,5,6,13],[7,5,6,11]>;
/* 23.) 16.24.0.p.1 */ X1623:=sub<GLeftRight|[3,5,10,5],[3,10,4,3],[9+16,12,14,7],[11,14,0,7]>;
/* 24.) 16.24.0.p.2 */ X1624:=sub<GLeftRight|[3+16,0,10,5],[9,5,8,7],[9,11,14,7],[13,5,12,3+16]>;
/* 25.) 16.48.0.a.1 */ X1625:=sub<GLeftRight|[9+16,0,4,9+16],[11,12,10,5],[11,14,6,5],[15+16,0,0,15+16]>;
/* 26.) 16.48.0.bb.1 */ X1626:=sub<GLeftRight|[1,10,0,15+16],[3+16,3,8,7],[9,4,8,13],[15,6+16,8,13]>;
/* 27.) 16.48.0.bb.2 */ X1627:=sub<GLeftRight|[1,7,8+16,11],[5,1,0,13],[5,2,8,9],[7,12,0,1]>;
/* 28.) 16.48.0.c.1 */ X1628:=sub<GLeftRight|[3,2,4,7],[5,4,12,9+16],[5,10,0,5],[9+16,8,6,7]>;
/* 29.) 16.48.0.c.2 */ X1629:=sub<GLeftRight|[7,0,2,9+16],[11,12,0,11],[15,2,6+16,9],[15,14,8,7]>;
/* 30.) 16.48.0.d.1 */ X1630:=sub<GLeftRight|[3+16,0,8,1],[5,8,0,11],[11,10,8,3],[15+16,0,8,9+16],[15+16,6,0,5]>;
/* 31.) 16.48.0.d.2 */ X1631:=sub<GLeftRight|[1,14,0,5],[5,6,8,15+16],[11,10,8,3],[13,0,8,15+16],[15+16,6,0,3+16]>;
/* 32.) 16.48.0.e.1 */ X1632:=sub<GLeftRight|[1,14,0,3+16],[5,4,8,15],[13,5,8,3],[15+16,15,0,3+16]>;
/* 33.) 16.48.0.h.1 */ X1633:=sub<GLeftRight|[3,14,2,5],[7,7,6,9+16],[9+16,7,0,15+16]>;
/* 34.) 16.48.0.h.2 */ X1634:=sub<GLeftRight|[5+16,14,14,11],[11,9,8,13],[13,13,2+16,11]>;
/* 35.) 16.48.0.i.1 */ X1635:=sub<GLeftRight|[1,6,10,7],[9,13,10,15],[11,14,0,11]>;
/* 36.) 16.48.0.j.1 */ X1636:=sub<GLeftRight|[1,8,0,13],[1,10,0,9+16],[13,0,8,13],[13,5,8,11],[15+16,3,0,1]>;
/* 37.) 16.48.0.l.1 */ X1637:=sub<GLeftRight|[1,1,0,3+16],[3,1,8,7],[3,6+16,8,11],[5,3,8,9+16]>;
/* 38.) 16.48.0.l.2 */ X1638:=sub<GLeftRight|[3,7,8,7],[5,0,0,11],[5,8,8,13],[9,13,8,11]>;
/* 39.) 16.48.0.m.1 */ X1639:=sub<GLeftRight|[1,7,8,3],[13,1,0,11],[13,10,12,9+16],[15,6+16,4,3]>;
/* 40.) 16.48.0.m.2 */ X1640:=sub<GLeftRight|[5,15,8,7],[7,0,8,7],[7,3,0,9+16],[15+16,4,12,7]>;
/* 41.) 16.48.0.n.1 */ X1641:=sub<GLeftRight|[9,3+16,4,7],[9+16,12,10,7],[15,5,6+16,5]>;
/* 42.) 16.48.0.q.1 */ X1642:=sub<GLeftRight|[3+16,5,0,13],[7,5,4,9],[7,6,12,3+16],[11,3,0,5]>;
/* 43.) 16.48.0.r.1 */ X1643:=sub<GLeftRight|[5,0,4,11],[5,1,8,9],[5,15,4,3+16],[11,11,12,13]>;
/* 44.) 16.48.0.t.1 */ X1644:=sub<GLeftRight|[5,11,2,15],[11,11,6,13],[13,9,12,11]>;
/* 45.) 16.48.0.t.2 */ X1645:=sub<GLeftRight|[1,8,14+16,7],[9+16,15,12,15+16],[13,13,4,3]>;
/* 46.) 16.48.0.u.1 */ X1646:=sub<GLeftRight|[1,11,0,3+16],[3+16,0,0,13],[9+16,5,0,7],[13,11,0,9+16]>;
/* 47.) 16.48.0.u.2 */ X1647:=sub<GLeftRight|[5,14,0,9+16],[9+16,2,0,3+16],[11,2,0,15+16],[13,3,0,5]>;
/* 48.) 16.48.0.v.1 */ X1648:=sub<GLeftRight|[1,9,0,15+16],[7,11,0,9+16],[9+16,3,0,5],[9+16,12,0,15+16],[15+16,6,0,15+16]>;
/* 49.) 16.48.0.v.2 */ X1649:=sub<GLeftRight|[3+16,6,0,15+16],[5,10,0,15+16],[11,7,0,9+16],[13,3,0,7],[13,8,0,7]>;
/* 50.) 16.48.0.x.1 */ X1650:=sub<GLeftRight|[3+16,7,0,1],[5,5,0,1],[5,9,0,7],[11,3,0,13]>;
/* 51.) 16.48.0.x.2 */ X1651:=sub<GLeftRight|[7,15,0,5],[11,11,0,13],[13,11,0,3+16],[15+16,0,0,9+16]>;
/* 52.) 16.48.0.y.1 */ X1652:=sub<GLeftRight|[9+16,7,0,7],[9+16,12,8,5],[11,15,8,15+16],[13,9,8,9+16]>;
/* 53.) 16.48.0.y.2 */ X1653:=sub<GLeftRight|[1,6,8,11],[3+16,1,0,3+16],[9+16,15,8,13],[13,9,0,13]>;
/* 54.) 16.48.0.z.1 */ X1654:=sub<GLeftRight|[1,0,8,5],[7,4,8,3],[11,1,0,9+16],[11,13,8,5]>;
/* 55.) 16.48.0.z.2 */ X1655:=sub<GLeftRight|[3,2,8,9],[7,3,0,9+16],[7,10,0,1],[9+16,6,0,7]>;
/* 56.) 16.24.1.f.1 */ X1656:=sub<GLeftRight|[5,2,8,9],[5,9,8,11],[7,7,10,9],[9,11,2,11]>;
/* 57.) 16.24.1.f.2 */ X1657:=sub<GLeftRight|[1,3,10,3+16],[3+16,3,2,13],[7,5,12,1],[15,12+16,14,9]>;
/* 58.) 16.24.1.h.1 */ X1658:=sub<GLeftRight|[11,8,6,1],[13,7,0,3+16],[15+16,3,4,1],[15+16,11,6,1]>;
/* 59.) 16.24.1.h.2 */ X1659:=sub<GLeftRight|[1,2,0,9+16],[1,2,2,15],[3,14,2,1],[13,11,6+16,15]>;
/* 60.) 16.24.1.l.1 */ X1660:=sub<GLeftRight|[1,2+16,8,7],[1,15,2,11],[3,6+16,4,15],[7,4,8,3]>;
/* 61.) 16.24.1.n.1 */ X1661:=sub<GLeftRight|[5,11,0,15+16],[5,12,4,1],[7,13,14,1],[15+16,14,0,3+16]>;
/* 62.) 16.24.1.n.2 */ X1662:=sub<GLeftRight|[5,4,4,9],[7,10,0,11],[7,14,10,1],[13,7,0,7]>;
/* 63.) 16.48.1.bg.1 */ X1663:=sub<GLeftRight|[3,11,10,5],[11,10,12,15+16],[13,9,12,15+16]>;
/* 64.) 16.48.1.bl.1 */ X1664:=sub<GLeftRight|[3+16,9,6,5],[3,14,14,13],[11,4,14,5],[11,9,0,5]>;
/* 65.) 16.48.1.bn.1 */ X1665:=sub<GLeftRight|[1,13,14,7],[5,5,0,11],[9+16,0,6,15+16],[15,10,10,1]>;
/* 66.) 16.48.1.bq.1 */ X1666:=sub<GLeftRight|[1,9,6,7],[3+16,4,0,11],[3,13,6+16,9],[5,5,0,11]>;
/* 67.) 16.48.1.bs.1 */ X1667:=sub<GLeftRight|[1,3,2,3+16],[1,6,2,15+16],[3+16,3,8,5],[9+16,15,12,15+16]>;
/* 68.) 16.48.1.bv.1 */ X1668:=sub<GLeftRight|[3+16,5,12,13],[9,10,2,7],[11,5+16,4,13],[13,5,4,15]>;
/* 69.) 16.48.1.ca.1 */ X1669:=sub<GLeftRight|[3,5,14,1],[9+16,3,12,7],[11,12,10,5],[13,13,0,11]>;
/* 70.) 16.48.1.cc.1 */ X1670:=sub<GLeftRight|[3+16,10,6,13],[5,1,8,11],[15+16,4,0,15+16],[15,14,4,3]>;
/* 71.) 16.48.1.cd.1 */ X1671:=sub<GLeftRight|[1,2,6,3+16],[5,11+16,8,11],[13,1,12,3+16]>;
/* 72.) 16.48.1.cf.1 */ X1672:=sub<GLeftRight|[1,9,6,15+16],[11,12,2,13],[11,12,14,1],[13,12,0,13]>;
/* 73.) 16.48.1.cg.1 */ X1673:=sub<GLeftRight|[3+16,4,12,7],[7,1,4,9],[7,10,6,1],[9+16,4,0,9+16]>;
/* 74.) 16.48.1.ch.1 */ X1674:=sub<GLeftRight|[1,4,4,5],[5,5,4,11],[13,0,10,7],[15,4,14,5]>;
/* 75.) 16.48.1.cr.1 */ X1675:=sub<GLeftRight|[9,4,6+16,7],[9+16,12,2,11],[13,7,12,7]>;
/* 76.) 16.48.1.cs.1 */ X1676:=sub<GLeftRight|[11,14,2,5+16],[13,11,14,3],[15,4,2,9],[15,4,8,15]>;
/* 77.) 16.48.1.ct.1 */ X1677:=sub<GLeftRight|[5,8,10,15],[5,9,10,11],[15,13,8,13]>;
/* 78.) 16.48.1.cx.1 */ X1678:=sub<GLeftRight|[1,11,2+16,13],[5,13,6,7],[7,8,0,7],[15,4,8,3]>;
/* 79.) 16.48.1.cx.2 */ X1679:=sub<GLeftRight|[3+16,15,10,1],[5,2,12,9+16],[5,15,10,9+16],[9+16,12,8,1]>;
/* 80.) 16.48.1.dc.1 */ X1680:=sub<GLeftRight|[1,3,12,11],[3,13,12+16,9],[5,14,0,1],[5,14,6,3+16]>;
/* 81.) 16.48.1.de.1 */ X1681:=sub<GLeftRight|[1,4,8,1],[3,1,8,13],[5,6,6,7],[7,1,4,9]>;
/* 82.) 16.48.1.df.1 */ X1682:=sub<GLeftRight|[7,0,4,11],[9,4,2,11],[13,0,10,7],[15+16,3,10,1]>;

LeftGroups:=
[
X161,X162,X163,X164,X165,X166,X167,X168,X169,X1610,
X1611,X1612,X1613,X1614,X1615,X1616,X1617,X1618,X1619,X1620,
X1621,X1622,X1623,X1624,X1625,X1626,X1627,X1628,X1629,X1630,
X1631,X1632,X1633,X1634,X1635,X1636,X1637,X1638,X1639,X1640,
X1641,X1642,X1643,X1644,X1645,X1646,X1647,X1648,X1649,X1650,
X1651,X1652,X1653,X1654,X1655,X1656,X1657,X1658,X1659,X1660,
X1661,X1662,X1663,X1664,X1665,X1666,X1667,X1668,X1669,X1670,
X1671,X1672,X1673,X1674,X1675,X1676,X1677,X1678,X1679,X1680,
X1681,X1682
];

X31:=sub<GLeftRight|[0,1,2+3,0],[1,1,1,2],[1,0,0,2+3]>;
X32:=sub<GLeftRight|[0,1,2+3,1],[1,2,0,2+3]>;
X33:=sub<GLeftRight|[0,1,2+3,0],[1,0,0,2+3]>;
X34:=sub<GLeftRight|[2+3,0,0,2+3],[1,0,0,2+3]>;

RightGroups:=[X31,X32,X33,X34];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS163:=ANSWERS163 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS163; // 4 hits
ANSWERS163:=[x:x in ANSWERS163];

A1:=sub<GLeftRight|[5,41,46,29],[9,7,34,9],[17,25,22,19],[31,33,30,17],[43,24,24,43],[47,2,40,29]>;
IsConjugate(GLeftRight,A1,ANSWERS163[1][3]); // 48.72.0.2
A2:=sub<GLeftRight|[13,4,22,11],[13,25,26,43],[23,29,40,5],[25,15,18,7],[31,0,0,47],[31,27,42,1]>;
IsConjugate(GLeftRight,A2,ANSWERS163[2][3]); // 48.72.0.4
A3:=sub<GLeftRight|[7,21,6,35],[25,17,46,31],[29,34,32,11],[35,20,16,11],[37,15,42,47],[45,11,34,33]>;
IsConjugate(GLeftRight,A3,ANSWERS163[3][3]); // 48.72.0.1
A4:=sub<GLeftRight|[21,14,4,45],[27,41,14,21],[31,27,36,25],[33,10,34,3],[37,19,32,7],[39,8,10,33]>;
IsConjugate(GLeftRight,A4,ANSWERS163[4][3]); // 48.72.0.3

// all genus 0, all direct multiples of 3.3.0.1


/* level 8*3 */

ANSWERS83:={};

Left:=8;
Right:=3;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X81:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,0,0,3+8],[1,1,0,5]>; /* 8.2.0.1, 8.2.0.a.1 */
X82:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+8],[1,1,0,5]>; /* 8.2.0.2, 8.2.0.b.1 */
X83:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.6.0.5, 8.6.0.a.1 */
X84:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[1,0,2,1],[1,1,0,3+8],[1,1,0,5]>; /* 8.6.0.6, 8.6.0.b.1 */
X85:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.1, 8.6.0.c.1 */
X86:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,2],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.4, 8.6.0.d.1 */
X87:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,2,0,5]>; /* 8.6.0.2, 8.6.0.f.1 */
X88:=sub<GLeftRight|[1,4,0,1],[2,1,3,2],[0,3+8,5,0],[1,2,0,3+8],[1,2,0,5]>; /* 8.6.0.3, 8.6.0.e.1 */
X89:=sub<GLeftRight|[1,4,0,1],[2,1,5,3],[3+8,3,0,5],[0,1,3+8,0]>; /* 8.8.0.1, 8.8.0.a.1 */
X810:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[0,1,1,0]>; /* 8.12.0.35, 8.12.0.f.1 */
X811:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,0,0,3+8],[1,2,0,5]>; /* 8.12.0.3, 8.12.0.a.1 */
X812:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[0,1,1,0]>; /* 8.12.0.16, 8.12.0.d.1 */
X813:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.12.0.4, 8.12.0.b.1 */
X814:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[1,2,0,5],[0,1,1,0]>; /* 8.12.0.39, 8.12.0.g.1 */
X815:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[0,1,3+8,2]>; /* 8.12.0.26, 8.12.0.h.1 */
X816:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,0,0,5],[2,1,1,2+8]>; /* 8.12.0.36, 8.12.0.l.1 */
X817:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[0,1,3+8,0]>; /* 8.12.0.19, 8.12.0.i.1 */
X818:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,2,2,5],[3+8,2,0,5],[2,1,1,2+8]>; /* 8.12.0.15, 8.12.0.k.1 */
X819:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[1,0,0,3+8],[1+8,2,2,1]>; /* 8.12.0.28, 8.12.0.t.1 */
X820:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.12.0.29, 8.12.0.s.1 */
X821:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[0,1,3+8,0],[2,1,5,2]>; /* 8.24.0.37, 8.24.0.m.1 */
X822:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[0,1,1,0]>; /* 8.24.0.80, 8.24.0.n.1 */
X823:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.22, 8.24.0.c.1 */
X824:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,2,0,5],[3+8,0,2,5]>; /* 8.24.0.31, 8.24.0.a.1 */
X825:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,2,0,5]>; /* 8.24.0.74, 8.24.0.t.1 */
X826:=sub<GLeftRight|[3+8,0,0,3+8],[1,4,0,1],[5,0,0,5],[1,0,4,1],[1,3,0,3+8],[1,3,2,3+8]>; /* 8.24.0.81, 8.24.0.v.1 */
X827:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.34, 8.12.0.z.1 */
X828:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.30, 8.12.0.y.1 */
X829:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.18, 8.12.0.x.1 */
X830:=sub<GLeftRight|[3+8,0,0,3+8],[0,3+8,5,0],[1,2,2,5],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.17, 8.12.0.w.1 */
X831:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,0,0,5]>; /* 8.12.0.9, 8.12.0.p.1 */
X832:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[1,2,0,3+8],[1,4,0,5]>; /* 8.12.0.10, 8.12.0.o.1 */
X833:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,0,0,5]>; /* 8.12.0.11, 8.12.0.m.1 */
X834:=sub<GLeftRight|[3+8,0,0,3+8],[5,0,0,5],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.12.0.5, 8.12.0.n.1 */
X835:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.12.0.31, 8.12.0.v.1 */
X836:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.12.0.33, 8.12.0.u.1 */
X837:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.12.0.32, 8.12.0.q.1 */
X838:=sub<GLeftRight|[2,1,3,2],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.12.0.27, 8.12.0.r.1 */
X839:=sub<GLeftRight|[1,1,1,2],[0,3+8,5,0],[3+8,3,0,5],[2,1,1,3]>; /* 8.16.0.1, 8.16.0.a.1 */
X840:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.23, 8.24.0.i.1 */
X841:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.24.0.25, 8.24.0.h.1 */
X842:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,3+8],[1,1,0,5]>; /* 8.24.0.99, 8.24.0.k.1 */
X843:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,0,5],[3+8,0,2,1]>; /* 8.24.0.35, 8.24.0.g.1 */
X844:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,0,2,3+8],[3,2,2,1]>; /* 8.24.0.36, 8.24.0.f.1 */
X845:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1,0,0,5]>; /* 8.24.0.67, 8.24.0.q.1 */
X846:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[1+8,1,4,1]>; /* 8.24.0.100, 8.24.0.r.1 */
X847:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,1,0,3+8],[3,2,2,1]>; /* 8.24.0.130, 8.24.0.s.1 */
X848:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[1,3,2,3+8],[3,2,2,1]>; /* 8.24.0.137, 8.24.0.z.1 */
X849:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,0,0,5],[1+8,1,4,1]>; /* 8.24.0.115, 8.24.0.y.1 */
X850:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[1,0,4,5]>; /* 8.24.0.70, 8.24.0.x.1 */
X851:=sub<GLeftRight|[1,2,0,1],[3+8,0,0,3+8],[5,0,0,5],[3+8,1,0,5],[3+8,0,2,1]>; /* 8.24.0.129, 8.24.0.o.1 */
X852:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.83, 8.24.0.bt.1 */
X853:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,2,2,3]>; /* 8.24.0.131, 8.24.0.bp.1 */
X854:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,3+8],[1,4,0,5]>; /* 8.24.0.82, 8.24.0.bn.1 */
X855:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,0,0,5],[1,2,2,3]>; /* 8.24.0.41, 8.24.0.bs.1 */
X856:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,0,0,5]>; /* 8.24.0.84, 8.24.0.bh.1 */
X857:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1+8,2,2,1]>; /* 8.24.0.127, 8.24.0.bj.1 */
X858:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,3+8],[1,4,0,5]>; /* 8.24.0.79, 8.24.0.bf.1 */
X859:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[1,4,0,5],[2,1,1,2+8]>; /* 8.24.0.39, 8.24.0.be.1 */
X860:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[1+8,2,2,1]>; /* 8.24.0.128, 8.24.0.bi.1 */
X861:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,0,0,5],[2,3,5,2]>; /* 8.24.0.134, 8.24.0.bo.1 */
X862:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[1+8,2,2,1]>; /* 8.24.0.136, 8.24.0.bq.1 */
X863:=sub<GLeftRight|[3+8,0,0,3+8],[1+8,4,4,1],[0,3+8,5,0],[3+8,4,0,5],[2,1,1,2+8]>; /* 8.24.0.135, 8.24.0.bc.1 */
X864:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[1,4,0,5],[1,6,0,3+8]>; /* 8.24.0.90, 8.24.0.bb.2 */
X865:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[1,4,0,5]>; /* 8.24.0.91, 8.24.0.ba.2 */
X866:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[3+8,2,0,1],[5,4,0,1]>; /* 8.24.0.88, 8.24.0.bb.1 */
X867:=sub<GLeftRight|[7,0,0,7],[0,3+8,5,2],[5,2,0,3+8],[5,4,0,1]>; /* 8.24.0.92, 8.24.0.ba.1 */
X868:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,0,0,5]>; /* 8.24.0.15, 8.24.0.d.1 */
X869:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,0,0,3+8],[1,2,0,5]>; /* 8.24.0.18, 8.24.0.e.1 */
X870:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.24.0.10, 8.24.0.e.2 */
X871:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.24.0.13, 8.24.0.d.2 */
X872:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[1,2,0,3+8],[1,4,0,5]>; /* 8.24.0.122, 8.24.0.bl.2 */
X873:=sub<GLeftRight|[0,3+8,5,0],[5,2,2,1],[5,4,0,1],[3+8,6,0,1]>; /* 8.24.0.119, 8.24.0.bl.1 */
X874:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.44, 8.48.0.b.2 */
X875:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.96, 8.48.0.f.1 */
X876:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[1,2,0,3+8],[3+8,2,0,5]>; /* 8.48.0.50, 8.48.0.b.1 */
X877:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,0,2,5]>; /* 8.48.0.88, 8.48.0.e.2 */
X878:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[1,2,0,5]>; /* 8.48.0.137, 8.48.0.e.1 */
X879:=sub<GLeftRight|[1,4,0,1],[7,0,0,7],[1,0,4,1],[3+8,0,0,1],[5,0,0,1]>; /* 8.48.0.45, 8.48.0.c.1 */
X880:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,3+8],[1,0,4,5]>; /* 8.48.0.97, 8.48.0.i.1 */
X881:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,0,0,5],[1,0,4,3+8]>; /* 8.48.0.98, 8.48.0.l.2 */
X882:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,0,0,5]>; /* 8.48.0.91, 8.48.0.k.2 */
X883:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,3+8],[1,2,0,5]>; /* 8.48.0.123, 8.48.0.k.1 */
X884:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,2,0,5],[1,2,4,3]>; /* 8.48.0.144, 8.48.0.l.1 */
X885:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,0,0,5]>; /* 8.48.0.197, 8.48.0.n.2 */
X886:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,2,0,5]>; /* 8.48.0.199, 8.48.0.n.1 */
X887:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[1,3,0,3+8],[1,3,4,1]>; /* 8.48.0.217, 8.48.0.p.1 */
X888:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,0,0,5],[1,2,4,3]>; /* 8.48.0.138, 8.48.0.h.1 */
X889:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,2,0,5],[1,0,4,3+8]>; /* 8.48.0.89, 8.48.0.h.2 */
X890:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1,0,4,3+8]>; /* 8.48.0.218, 8.48.0.m.1 */
X891:=sub<GLeftRight|[3+8,2,0,3+8],[5,2,0,5],[3+8,3,0,5],[1+8,1,4,1]>; /* 8.48.0.224 , 8.48.0.m.2 */
X892:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[1,4,0,5]>; /* 8.48.0.204, 8.48.0.q.2 */
X893:=sub<GLeftRight|[3,4,4,3],[0,3+8,5,0],[3+8,4,0,1],[5,4,0,1]>; /* 8.48.0.203, 8.48.0.q.1 */

LeftGroups:=[
X81,X82,X83,X84,X85,X86,X87,X88,X89,X810,
X811,X812,X813,X814,X815,X816,X817,X818,X819,X820,
X821,X822,X823,X824,X825,X826,X827,X828,X829,X830,
X831,X832,X833,X834,X835,X836,X837,X838,X839,X840,
X841,X842,X843,X844,X845,X846,X847,X848,X849,X850,
X851,X852,X853,X854,X855,X856,X857,X858,X859,X860,
X861,X862,X863,X864,X865,X866,X867,X868,X869,X870,
X871,X872,X873,X874,X875,X876,X877,X878,X879,X880,
X881,X882,X883,X884,X885,X886,X887,X888,X889,X890,
X891,X892,X893
];


X31:=sub<GLeftRight|[0,1,2+3,0],[1,1,1,2],[1,0,0,2+3]>;
X32:=sub<GLeftRight|[0,1,2+3,1],[1,2,0,2+3]>;
X33:=sub<GLeftRight|[0,1,2+3,0],[1,0,0,2+3]>;
X34:=sub<GLeftRight|[2+3,0,0,2+3],[1,0,0,2+3]>;

RightGroups:=[X31,X32,X33,X34];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS83:=ANSWERS83 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS83; // 55 hits
ANSWERS83:=[x:x in ANSWERS83];

A1:=sub<GLeftRight|[5,15,6,11],[9,4,16,9],[11,1,2,5],[11,14,2,13],[13,13,4,23],[21,5,2,15]>; // 24.36.1.61
IsConjugate(GLeftRight,A1,ANSWERS83[1][3]);
A2:=sub<GLeftRight|[1,21,6,19],[5,0,12,1],[5,5,8,19],[11,11,10,17],[19,1,4,5],[21,11,22,3]>; // 24.36.1.62
IsConjugate(GLeftRight,A2,ANSWERS83[2][3]);
A3:=sub<GLeftRight|[11,18,12,11],[11,19,6,7],[13,3,12,23],[17,14,0,17],[19,8,12,11]>; // 24.48.1.77
IsConjugate(GLeftRight,A3,ANSWERS83[3][3]);
A4:=sub<GLeftRight|[3,7,14,21],[3,10,14,9],[7,4,22,17],[7,12,0,23],[11,23,22,5],[21,8,22,15]>; // 24.36.1.63
IsConjugate(GLeftRight,A4,ANSWERS83[4][3]);
A5:=sub<GLeftRight|[5,17,22,17],[5,21,6,19],[11,9,18,23],[19,18,0,7],[19,22,8,13]>; // 24.36.0.16
IsConjugate(GLeftRight,A5,ANSWERS83[5][3]);
A6:=sub<GLeftRight|[5,17,22,11],[5,17,22,23],[7,12,6,17],[17,19,20,23],[21,19,14,3],[23,14,22,5]>; // 24.36.1.64
IsConjugate(GLeftRight,A6,ANSWERS83[6][3]);
A7:=sub<GLeftRight|[7,6,0,1],[11,12,0,5],[17,21,12,7],[19,3,12,19],[23,2,0,23],[23,13,0,13]>; // 24.48.1.69
IsConjugate(GLeftRight,A7,ANSWERS83[7][3]);
A8:=sub<GLeftRight|[1,20,12,7],[1,23,0,23],[13,21,6,13],[17,2,0,7],[19,18,6,19]>; // 24.24.0.99
IsConjugate(GLeftRight,A8,ANSWERS83[8][3]);
A9:=sub<GLeftRight|[3,14,22,21],[11,13,8,5],[13,16,10,11],[13,21,18,19],[21,19,2,3],[23,4,22,13]>; // 24.36.1.59
IsConjugate(GLeftRight,A9,ANSWERS83[9][3]);
A10:=sub<GLeftRight|[1,22,10,17],[5,10,22,7],[9,8,22,15],[17,8,22,23],[19,11,2,5]>; // 24.18.0.6
IsConjugate(GLeftRight,A10,ANSWERS83[10][3]);
A11:=sub<GLeftRight|[1,4,14,19],[3,20,20,3],[9,8,14,21],[13,5,4,1],[23,11,20,13]>; // 24.18.1.5
IsConjugate(GLeftRight,A11,ANSWERS83[11][3]);
A12:=sub<GLeftRight|[13,1,18,19],[13,21,18,11],[17,20,0,1],[19,20,9,17]>; // 24.32.1.1
IsConjugate(GLeftRight,A12,ANSWERS83[12][3]);
A13:=sub<GLeftRight|[1,11,0,7],[7,5,12,5],[7,9,0,19],[13,22,0,23],[17,11,0,5],[19,10,12,17]>; // 24.48.1.70
IsConjugate(GLeftRight,A13,ANSWERS83[13][3]);
A14:=sub<GLeftRight|[5,23,10,17],[9,17,14,21],[15,19,2,15],[21,7,10,3],[21,16,4,15],[23,23,2,1]>; // 24.36.0.15
IsConjugate(GLeftRight,A14,ANSWERS83[14][3]);
A15:=sub<GLeftRight|[2,13,15,19],[5,16,18,5],[8,19,21,1],[16,13,15,20]>; // 24.8.0.9
IsConjugate(GLeftRight,A15,ANSWERS83[15][3]);
A16:=sub<GLeftRight|[5,4,12,23],[5,14,0,7],[7,8,0,13],[7,12,12,23],[13,2,6,13],[13,16,6,1]>; // 24.48.1.32
IsConjugate(GLeftRight,A16,ANSWERS83[16][3]);
A17:=sub<GLeftRight|[1,6,18,5],[1,23,0,11],[5,12,0,5],[7,14,0,1],[23,18,0,7]>; // 24.24.0.102
IsConjugate(GLeftRight,A17,ANSWERS83[17][3]);
A18:=sub<GLeftRight|[1,0,6,19],[7,15,9,8],[8,9,3,22],[23,21,15,10]>; // 24.24.1.1
IsConjugate(GLeftRight,A18,ANSWERS83[18][3]);
A19:=sub<GLeftRight|[1,10,12,11],[1,14,6,5],[11,3,6,19],[11,18,0,11],[13,7,0,1]>; // 24.24.0.101
IsConjugate(GLeftRight,A19,ANSWERS83[19][3]);
A20:=sub<GLeftRight|[0,23,13,0],[1,0,3,7],[2,17,1,14],[11,12,12,23],[23,9,21,10]>; //	24.48.1.79
IsConjugate(GLeftRight,A20,ANSWERS83[20][3]);
A21:=sub<GLeftRight|[1,23,12,23],[7,1,12,1],[13,9,12,19],[13,18,0,23],[17,20,0,19],[23,5,12,13]>; // 24.48.1.67
IsConjugate(GLeftRight,A21,ANSWERS83[21][3]);
A22:=sub<GLeftRight|[1,15,0,19],[17,7,0,5],[19,1,0,17],[19,2,0,7],[19,10,0,13],[19,22,0,19],[23,14,0,7]>; // 24.48.1.65
IsConjugate(GLeftRight,A22,ANSWERS83[22][3]);
A23:=sub<GLeftRight|[1,21,6,5],[11,12,6,1],[13,12,0,5],[17,21,0,19],[21,23,14,21]>; // 24.36.1.9
IsConjugate(GLeftRight,A23,ANSWERS83[23][3]);
A24:=sub<GLeftRight|[5,9,0,7],[5,22,12,13],[7,22,12,7],[11,21,12,5],[17,5,18,23],[23,7,12,1]>; // 24.48.1.76
IsConjugate(GLeftRight,A24,ANSWERS83[24][3]);
A25:=sub<GLeftRight|[3,22,4,21],[5,3,12,17],[15,5,16,15],[17,0,6,19],[17,6,0,23]>; // 24.36.1.8
IsConjugate(GLeftRight,A25,ANSWERS83[25][3]);
A26:=sub<GLeftRight|[5,18,12,23],[7,0,18,19],[11,18,0,11],[17,20,6,13],[17,23,18,13]>; // 24.72.1.2
IsConjugate(GLeftRight,A26,ANSWERS83[26][3]);
A27:=sub<GLeftRight|[1,8,22,1],[1,11,14,23],[15,2,14,9],[17,14,2,13],[19,23,20,11]>; // 24.18.1.7
IsConjugate(GLeftRight,A27,ANSWERS83[27][3]);
A28:=sub<GLeftRight|[5,17,10,11],[13,6,12,5],[17,20,22,23],[21,17,2,3],[23,5,16,11]>; //24.18.1.8
IsConjugate(GLeftRight,A28,ANSWERS83[28][3]);
A29:=sub<GLeftRight|[1,18,12,1],[5,4,12,5],[5,13,12,7],[7,10,0,23],[19,3,0,13],[23,8,6,13]>; // 24.48.1.75
IsConjugate(GLeftRight,A29,ANSWERS83[29][3]);
A30:=sub<GLeftRight|[11,0,0,19],[11,9,0,23],[15,16,8,15],[21,23,10,9],[23,21,12,13]>; // 24.36.1.4
IsConjugate(GLeftRight,A30,ANSWERS83[30][3]);
A31:=sub<GLeftRight|[3,22,20,15],[9,17,22,15],[13,20,2,11],[17,11,10,23],[23,0,6,5],[23,13,14,5]>; // 24.36.0.17
IsConjugate(GLeftRight,A31,ANSWERS83[31][3]);
A32:=sub<GLeftRight|[7,15,12,5],[9,4,14,3],[13,22,8,1],[17,12,18,19],[17,13,20,11],[17,19,20,23]>; // 24.36.1.60
IsConjugate(GLeftRight,A32,ANSWERS83[32][3]);
A33:=sub<GLeftRight|[8,7,11,8],[9,11,23,6],[16,11,19,1],[21,5,20,3]>; // 	24.6.1.2
IsConjugate(GLeftRight,A33,ANSWERS83[33][3]);
A34:=sub<GLeftRight|[1,4,12,23],[1,5,18,5],[13,3,18,23],[17,5,6,19],[17,11,6,5]>; // 24.48.1.71
IsConjugate(GLeftRight,A34,ANSWERS83[34][3]);
A35:=sub<GLeftRight|[13,12,18,19],[17,7,0,13],[17,17,6,23],[19,13,12,11],[19,16,6,5]>; // 24.24.1.22
IsConjugate(GLeftRight,A35,ANSWERS83[35][3]);
A36:=sub<GLeftRight|[5,12,12,23],[5,18,12,5],[5,21,0,1],[11,21,0,23],[11,21,6,1]>; // 24.72.1.3
IsConjugate(GLeftRight,A36,ANSWERS83[36][3]);
A37:=sub<GLeftRight|[1,2,0,17],[5,12,12,13],[7,21,6,11],[19,20,18,7],[23,20,18,1]>; // 24.24.0.100
IsConjugate(GLeftRight,A37,ANSWERS83[37][3]);
A38:=sub<GLeftRight|[9,2,22,9],[9,11,8,21],[13,9,0,11],[17,15,0,23],[19,12,6,23]>; // 24.36.1.10
IsConjugate(GLeftRight,A38,ANSWERS83[38][3]);
A39:=sub<GLeftRight|[0,7,23,12],[0,13,11,3],[12,23,5,0],[14,21,3,2]>; // 24.12.1.4
IsConjugate(GLeftRight,A39,ANSWERS83[39][3]);
A40:=sub<GLeftRight|[5,15,18,7],[7,0,12,17],[11,6,18,17],[19,0,18,5],[19,12,6,11]>; // 24.72.1.4
IsConjugate(GLeftRight,A40,ANSWERS83[40][3]);
A41:=sub<GLeftRight|[1,21,0,5],[5,19,16,19],[9,5,20,3],[23,2,7,5]>; // 24.6.1.1
IsConjugate(GLeftRight,A41,ANSWERS83[41][3]);
A42:=sub<GLeftRight|[1,21,4,19],[5,15,16,17],[13,3,4,1],[17,3,20,5],[23,0,12,5],[23,21,12,19]>; // 24.48.1.68
IsConjugate(GLeftRight,A42,ANSWERS83[42][3]);
A43:=sub<GLeftRight|[3,17,2,15],[9,7,8,3],[9,14,14,21],[11,3,18,17],[23,21,6,13]>; // 24.36.1.3
IsConjugate(GLeftRight,A43,ANSWERS83[43][3]);
A44:=sub<GLeftRight|[1,22,2,19],[3,1,16,9],[19,3,18,13],[19,22,22,17],[19,23,2,5],[23,2,8,19]>; // 24.36.0.18
IsConjugate(GLeftRight,A44,ANSWERS83[44][3]);
A45:=sub<GLeftRight|[5,20,0,13],[13,6,12,1],[17,12,6,13],[19,4,18,7],[19,18,0,23],[23,12,6,1]>; // 24.48.1.31
IsConjugate(GLeftRight,A45,ANSWERS83[45][3]);
A46:=sub<GLeftRight|[3,11,14,3],[5,9,12,1],[7,11,22,1],[13,5,22,1],[17,3,6,23]>; // 24.18.1.6
IsConjugate(GLeftRight,A46,ANSWERS83[46][3]);
A47:=sub<GLeftRight|[13,12,12,19],[15,2,22,15],[15,7,20,15],[17,23,4,23],[21,17,2,15]>; // 24.18.0.5
IsConjugate(GLeftRight,A47,ANSWERS83[47][3]);
A48:=sub<GLeftRight|[1,8,0,17],[1,8,0,23],[7,21,6,7],[17,18,6,23],[23,0,12,17]>; // 24.72.1.1
IsConjugate(GLeftRight,A48,ANSWERS83[48][3]);
A49:=sub<GLeftRight|[5,20,6,13],[7,22,21,7],[10,7,9,14],[17,12,0,7]>; // 24.8.0.10
IsConjugate(GLeftRight,A49,ANSWERS83[49][3]);
A50:=sub<GLeftRight|[11,3,6,23],[13,15,10,5],[13,18,10,7],[19,12,4,11],[23,21,18,11]>; // 24.48.1.74
IsConjugate(GLeftRight,A50,ANSWERS83[50][3]);
A51:=sub<GLeftRight|[3,4,4,9],[7,12,0,23],[7,18,6,13],[21,4,8,21],[23,3,0,7]>; // 24.36.1.7
IsConjugate(GLeftRight,A51,ANSWERS83[51][3]);
A52:=sub<GLeftRight|[1,6,8,17],[7,6,20,19],[7,9,0,11],[13,21,0,17],[17,3,16,13],[23,15,20,17]>; // 24.48.1.66
IsConjugate(GLeftRight,A52,ANSWERS83[52][3]);
A53:=sub<GLeftRight|[1,9,18,11],[7,11,6,23],[11,12,0,13],[19,22,18,13],[23,6,12,17]>; //24.24.1.21
IsConjugate(GLeftRight,A53,ANSWERS83[53][3]);
A54:=sub<GLeftRight|[3,1,4,3],[11,3,6,23],[12,19,17,3],[22,3,21,1]>; // 24.12.1.3
IsConjugate(GLeftRight,A54,ANSWERS83[54][3]);
A55:=sub<GLeftRight|[11,6,9,11],[11,18,18,1],[20,9,3,14],[23,6,9,7]>; // 24.24.1.2
IsConjugate(GLeftRight,A55,ANSWERS83[55][3]);

// here we compute the equation of the modular curves generated by the groups of genus 1 and level 24

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

M1:=CreateModularCurveRec(24,Generators(A1));
FindModelOfXG(M1,1); // EllipticCurve([0,8]), rank 1
M2:=CreateModularCurveRec(24,Generators(A2));
FindModelOfXG(M2,1); // EllipticCurve([0,8]), rank 1
M3:=CreateModularCurveRec(24,Generators(A3));
FindModelOfXG(M3,1); // no rational points
M4:=CreateModularCurveRec(24,Generators(A4));
FindModelOfXG(M4,1); // EllipticCurve([0,-8]), rank 0

M6:=CreateModularCurveRec(24,Generators(A6));
FindModelOfXG(M6,1); // EllipticCurve([0,-1]), rank 0
M7:=CreateModularCurveRec(24,Generators(A7));
FindModelOfXG(M7,1); // EllipticCurve([0,1,0,-17,15]), rank 0

M9:=CreateModularCurveRec(24,Generators(A9));
FindModelOfXG(M9,1); // EllipticCurve([0,1]), rank 0

M11:=CreateModularCurveRec(24,Generators(A11));
FindModelOfXG(M11,1); // EllipticCurve([0,8]), rank 1
M12:=CreateModularCurveRec(24,Generators(A12));
FindModelOfXG(M12,1); // no rational points
M13:=CreateModularCurveRec(24,Generators(A13));
FindModelOfXG(M13,1); // EllipticCurve([0,-1,0,-17,-15]), rank 0
M16:=CreateModularCurveRec(24,Generators(A16));
FindModelOfXG(M16,1); // EllipticCurve([0,-1,0,-17,-15]), rank 0
M18:=CreateModularCurveRec(24,Generators(A18));
FindModelOfXG(M18,1); // EllipticCurve([0,216]), rank 0

M20:=CreateModularCurveRec(24,Generators(A20));
FindModelOfXG(M20,1); // EllipticCurve([0,8]), rank 1
M21:=CreateModularCurveRec(24,Generators(A21));
FindModelOfXG(M21,1); // EllipticCurve([0,1,0,-4,-4]), rank 0
M22:=CreateModularCurveRec(24,Generators(A22));
FindModelOfXG(M22,1); // EllipticCurve([0,1,0,-4,4]), rank 0
M23:=CreateModularCurveRec(24,Generators(A23));
FindModelOfXG(M23,1); // EllipticCurve([0,1,0,-17,15]), rank 0
M24:=CreateModularCurveRec(24,Generators(A24));
FindModelOfXG(M24,1); // no rational points
M25:=CreateModularCurveRec(24,Generators(A25));
FindModelOfXG(M25,1); // EllipticCurve([-60,176]), rank 1
M26:=CreateModularCurveRec(24,Generators(A26));
FindModelOfXG(M26,1); // EllipticCurve([0,-8]), rank 0
M27:=CreateModularCurveRec(24,Generators(A27));
FindModelOfXG(M27,1); // EllipticCurve([0,-8]), rank 0
M28:=CreateModularCurveRec(24,Generators(A28));
FindModelOfXG(M28,1); // EllipticCurve([0,8]), rank 1
M29:=CreateModularCurveRec(24,Generators(A29));
FindModelOfXG(M29,1); // no rational points

M30:=CreateModularCurveRec(24,Generators(A30));
FindModelOfXG(M30,1); // EllipticCurve([-60,-176]), rank 0
M32:=CreateModularCurveRec(24,Generators(A32));
FindModelOfXG(M32,1); // EllipticCurve([0,-8]), rank 0
M33:=CreateModularCurveRec(24,Generators(A33));
FindModelOfXG(M33,1); // EllipticCurve([0,-216]), rank 1
M34:=CreateModularCurveRec(24,Generators(A34));
FindModelOfXG(M34,1); // no rational points
M35:=CreateModularCurveRec(24,Generators(A35));
FindModelOfXG(M35,1); // EllipticCurve([0,-1,0,-97,385]), rank 1
M36:=CreateModularCurveRec(24,Generators(A36));
FindModelOfXG(M36,1); // EllipticCurve([0,-8]), rank 0
M38:=CreateModularCurveRec(24,Generators(A38));
FindModelOfXG(M38,1); // EllipticCurve([0,-1,0,-17,-15]), rank 0
M39:=CreateModularCurveRec(24,Generators(A39));
FindModelOfXG(M39,1); // EllipticCurve([-540,4752]), rank 0

M40:=CreateModularCurveRec(24,Generators(A40));
FindModelOfXG(M40,1); // EllipticCurve([0,8]), rank 1
M41:=CreateModularCurveRec(24,Generators(A41));
FindModelOfXG(M41,1); // EllipticCurve([0,216]), rank 0
M42:=CreateModularCurveRec(24,Generators(A42));
FindModelOfXG(M42,1); // EllipticCurve([0,-1,0,-17,-15]), rank 0
M43:=CreateModularCurveRec(24,Generators(A43));
FindModelOfXG(M43,1); // EllipticCurve([-60,176]); rank 1
M45:=CreateModularCurveRec(24,Generators(A45));
FindModelOfXG(M45,1); // EllipticCurve([0,1,0,-17,15]), rank 0
M46:=CreateModularCurveRec(24,Generators(A46));
FindModelOfXG(M46,1); // EllipticCurve([0,-8]), rank 0
M48:=CreateModularCurveRec(24,Generators(A48));
FindModelOfXG(M48,1); // EllipticCurve([0,8]), rank 1

M50:=CreateModularCurveRec(24,Generators(A50));
FindModelOfXG(M50,1); // no rational points
M51:=CreateModularCurveRec(24,Generators(A51));
FindModelOfXG(M51,1); // EllipticCurve([-60,-176]), rank 0
M52:=CreateModularCurveRec(24,Generators(A52));
FindModelOfXG(M52,1); // EllipticCurve([0,1,0,-17,15]), rank 0
M53:=CreateModularCurveRec(24,Generators(A53));
FindModelOfXG(M53,1); // EllipticCurve([0,1,0,-97,-385]), rank 0
M54:=CreateModularCurveRec(24,Generators(A54));
FindModelOfXG(M54,1); // EllipticCurve([-540,-4752]), rank 1
M55:=CreateModularCurveRec(24,Generators(A55));
FindModelOfXG(M55,1); // EllipticCurve([0,-216]), rank 1

/* level 4*3 */

ANSWERS43:={};

Left:=4;
Right:=3;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X41:=sub<GLeftRight|[1,2,0,1],[1,1,1,2],[1,1,0,3+4]>; /* 4.2.0.1, 4.2.0.a.1 */
X42:=sub<GLeftRight|[1,2,0,1],[3+4,0,0,3+4],[1,0,2,1],[1,1,0,3+4]>; /* 4.6.0.5, 4.6.0.a.1 */ 
X43:=sub<GLeftRight|[1,1,1,2],[0,1,3+4,0],[1,1,0,3+4]>; /* 4.4.0.1, 4.4.0.a.1 */
X44:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,0,0,3+4]>; /* 4.6.0.3, 4.6.0.b.1 */
X45:=sub<GLeftRight|[3+4,0,0,3+4],[0,1,3+4,2],[1,2,0,3+4]>; /* 4.6.0.1, 4.6.0.c.1 */
X46:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,0,0,3+4]>; /* 4.6.0.4, 4.6.0.e.1 */
X47:=sub<GLeftRight|[1+4,2,2,1],[0,1,3+4,0],[1,2,0,3+4]>; /* 4.6.0.2, 4.6.0.d.1 */
X48:=sub<GLeftRight|[2,1,1,3],[1,1,0,3+4]>; /* 4.8.0.2, 4.8.0.b.1 */
X49:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[0,1,1,0]>; /* 4.12.0.9, 4.12.0.d.1 */
X410:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,0,0,3+4]>; /* 4.12.0.4, 4.12.0.a.1 */

X411:=sub<GLeftRight|[3+4,0,0,3+4],[1+4,2,2,1],[1,2,0,3+4]>; /* 4.12.0.3, 4.12.0.b.1 */
X412:=sub<GLeftRight|[0,1,3+4,0],[1,0,0,3+4]>; /* 4.12.0.11, 4.12.0.f.1 */
X413:=sub<GLeftRight|[0,1,3+4,0],[2,1+4,1,2]>; /* 4.12.0.5, 4.12.0.e.1 */
X414:=sub<GLeftRight|[3+4,0,0,3+4],[1,0,0,3+4]>; /* 4.24.0.8, 4.24.0.b.1 */
X415:=sub<GLeftRight|[3+4,0,0,3+4],[1,3,0,3+4]>; /* 4.24.0.2, 4.24.0.c.1 */

LeftGroups:=[
X41,X42,X43,X44,X45,X46,X47,X48,X49,X410,
X411,X412,X413,X414,X415
];

X31:=sub<GLeftRight|[0,1,2+3,0],[1,1,1,2],[1,0,0,2+3]>;
X32:=sub<GLeftRight|[0,1,2+3,1],[1,2,0,2+3]>;
X33:=sub<GLeftRight|[0,1,2+3,0],[1,0,0,2+3]>;
X34:=sub<GLeftRight|[2+3,0,0,2+3],[1,0,0,2+3]>;

RightGroups:=[X31,X32,X33,X34];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS43:=ANSWERS43 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS43; // 31 hits
ANSWERS43:=[x:x in ANSWERS43];

GL2Label(ANSWERS43[1][3]); // 12.36.1.13
GL2Label(ANSWERS43[2][3]); // 12.18.1.3
GL2Label(ANSWERS43[3][3]); // 12.36.1.14
GL2Label(ANSWERS43[4][3]); // 12.16.1.1
GL2Label(ANSWERS43[5][3]); // 12.18.0.1
GL2Label(ANSWERS43[6][3]); // 12.18.1.1
GL2Label(ANSWERS43[7][3]); // 12.24.1.3
GL2Label(ANSWERS43[8][3]); // 12.36.1.7
GL2Label(ANSWERS43[9][3]); // 12.48.1.3
GL2Label(ANSWERS43[10][3]); // 12.48.1.4
GL2Label(ANSWERS43[11][3]); // 12.24.1.5
GL2Label(ANSWERS43[12][3]); // 12.24.0.4
GL2Label(ANSWERS43[13][3]); // 12.24.0.3
GL2Label(ANSWERS43[14][3]); // 12.72.1.2
GL2Label(ANSWERS43[15][3]); // 12.18.0.2
GL2Label(ANSWERS43[16][3]); // 12.12.1.1
GL2Label(ANSWERS43[17][3]); // 12.72.1.3
GL2Label(ANSWERS43[18][3]); // 12.36.1.12
GL2Label(ANSWERS43[19][3]); // 12.18.1.2
GL2Label(ANSWERS43[20][3]); // 12.36.1.9
GL2Label(ANSWERS43[21][3]); // 12.24.0.5
GL2Label(ANSWERS43[22][3]); // 12.32.1.4
GL2Label(ANSWERS43[23][3]); // 12.72.1.1
GL2Label(ANSWERS43[24][3]); // 12.36.1.3
GL2Label(ANSWERS43[25][3]); // 12.36.1.11
GL2Label(ANSWERS43[26][3]); // 12.12.0.5
GL2Label(ANSWERS43[27][3]); // 12.8.0.5
GL2Label(ANSWERS43[28][3]); // 12.6.1.1
GL2Label(ANSWERS43[29][3]); // 12.48.1.5
GL2Label(ANSWERS43[30][3]); // 12.24.1.1
GL2Label(ANSWERS43[31][3]); // 12.24.1.6

// here we compute the equations of the modular curves of genus 1 and level 12

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

M1:=CreateModularCurveRec(12,Generators(ANSWERS43[1][3]));
FindModelOfXG(M1,1); // EllipticCurve([-15,22]), rank 0
M2:=CreateModularCurveRec(12,Generators(ANSWERS43[2][3]));
FindModelOfXG(M2,1); // EllipticCurve([0,-1]), rank 0
M3:=CreateModularCurveRec(12,Generators(ANSWERS43[3][3]));
FindModelOfXG(M3,1); // EllipticCurve([-15,-22]), rank 0
M4:=CreateModularCurveRec(12,Generators(ANSWERS43[4][3]));
FindModelOfXG(M4,1); // EllipticCurve([0,1,0,16,180]), rank 0
M6:=CreateModularCurveRec(12,Generators(ANSWERS43[6][3]));
FindModelOfXG(M6,1); // EllipticCurve([0,1]), rank 0
M7:=CreateModularCurveRec(12,Generators(ANSWERS43[7][3]));
FindModelOfXG(M7,1); // EllipticCurve([0,27]), rank 0
M8:=CreateModularCurveRec(12,Generators(ANSWERS43[8][3]));
FindModelOfXG(M8,1); // EllipticCurve([0,1]), rank 0
M9:=CreateModularCurveRec(12,Generators(ANSWERS43[9][3]));
FindModelOfXG(M9,1); // EllipticCurve([0,-1,0,-4,4]), rank 0
M10:=CreateModularCurveRec(12,Generators(ANSWERS43[10][3]));
FindModelOfXG(M10,1); // EllipticCurve([0,1,0,-4,-4]), rank 0
M11:=CreateModularCurveRec(12,Generators(ANSWERS43[11][3]));
FindModelOfXG(M11,1); // EllipticCurve([0,-1,0,-24,-36]), rank 0
M14:=CreateModularCurveRec(12,Generators(ANSWERS43[14][3]));
FindModelOfXG(M14,1); // EllipticCurve([0,-1]), rank 0
M16:=CreateModularCurveRec(12,Generators(ANSWERS43[16][3]));
FindModelOfXG(M16,1); // EllipticCurve([-135,594]), rank 0
M17:=CreateModularCurveRec(12,Generators(ANSWERS43[17][3]));
FindModelOfXG(M17,1); // EllipticCurve([0,-1]), rank 0
M18:=CreateModularCurveRec(12,Generators(ANSWERS43[18][3]));
FindModelOfXG(M18,1); // EllipticCurve([0,1,0,-4,-4]), rank 0
M19:=CreateModularCurveRec(12,Generators(ANSWERS43[19][3]));
FindModelOfXG(M19,1); // EllipticCurve([0,-1]), rank 0
M20:=CreateModularCurveRec(12,Generators(ANSWERS43[20][3]));
FindModelOfXG(M20,1); // EllipticCurve([-15,-22]), rank 0
M22:=CreateModularCurveRec(12,Generators(ANSWERS43[22][3]));
FindModelOfXG(M22,1); // EllipticCurve([0,1,0,-24,36]), rank 0
M23:=CreateModularCurveRec(12,Generators(ANSWERS43[23][3]));
FindModelOfXG(M23,1); // EllipticCurve([0,1]), rank 0
M24:=CreateModularCurveRec(12,Generators(ANSWERS43[24][3]));
FindModelOfXG(M24,1); // EllipticCurve([0,-1]), rank 0
M25:=CreateModularCurveRec(12,Generators(ANSWERS43[25][3]));
FindModelOfXG(M25,1); // EllipticCurve([0,-1,0,-4,4]), rank 0
M28:=CreateModularCurveRec(12,Generators(ANSWERS43[28][3]));
FindModelOfXG(M28,1); // EllipticCurve([0,27]), rank 0
M29:=CreateModularCurveRec(12,Generators(ANSWERS43[29][3]));
FindModelOfXG(M29,1); // EllipticCurve([0,1,0,-4,-4]), rank 0
M30:=CreateModularCurveRec(12,Generators(ANSWERS43[30][3]));
FindModelOfXG(M30,1); // EllipticCurve([0,1,0,-24,36]), rank 0
M31:=CreateModularCurveRec(12,Generators(ANSWERS43[31][3]));
FindModelOfXG(M31,1); // EllipticCurve([0,1,0,-24,36]), rank 0

// all modular curves with finitely many points over rationals

/* level 2*3 */

ANSWERS23:={};

G2:=GL(2,Integers(2));

Left:=2;
Right:=3;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

H21:=sub<G2|[0,1,1,1]>; /* 2.2.0.1, 2.2.0.a.1 */
H22:=sub<G2|[0,1,1,0]>; /* 2.3.0.1, 2.3.0.a.1 */
H23:=sub<G2|[]>; /* 2.6.0.1, 2.6.0.a.1 */

LeftGroups:=[H21,H22,H23];

X31:=sub<GLeftRight|[0,1,2+3,0],[1,1,1,2],[1,0,0,2+3]>;
X32:=sub<GLeftRight|[0,1,2+3,1],[1,2,0,2+3]>;
X33:=sub<GLeftRight|[0,1,2+3,0],[1,0,0,2+3]>;
X34:=sub<GLeftRight|[2+3,0,0,2+3],[1,0,0,2+3]>;

RightGroups:=[X31,X32,X33,X34];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
g:=GL2Genus(X);
if g lt 2 then
ANSWERS23:=ANSWERS23 join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS23; // 12 hits
ANSWERS23:=[x:x in ANSWERS23];

GL2Label(ANSWERS23[1][3]); // 6.36.0.1
GL2Label(ANSWERS23[2][3]); // 6.9.0.1
GL2Label(ANSWERS23[3][3]); // 6.8.0.1
GL2Label(ANSWERS23[4][3]); // 6.12.0.1
GL2Label(ANSWERS23[5][3]); // 6.18.1.1
GL2Label(ANSWERS23[6][3]); // 6.24.0.1
GL2Label(ANSWERS23[7][3]); // 6.72.1.1
GL2Label(ANSWERS23[8][3]); // 6.36.1.1
GL2Label(ANSWERS23[9][3]); // 6.18.0.1
GL2Label(ANSWERS23[10][3]); // 6.6.1.1
GL2Label(ANSWERS23[11][3]); // 6.12.1.1
GL2Label(ANSWERS23[12][3]); // 6.24.1.1

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

// here we compute the equations of the modular curves of the groups of genus 1 and level 6

M5:=CreateModularCurveRec(6,Generators(ANSWERS23[5][3]));
FindModelOfXG(M5,1); // EllipticCurve([0,1]), rank 0
M7:=CreateModularCurveRec(6,Generators(ANSWERS23[7][3]));
FindModelOfXG(M7,1); // EllipticCurve([0,1]), rank 0
M8:=CreateModularCurveRec(6,Generators(ANSWERS23[8][3]));
FindModelOfXG(M8,1); // EllipticCurve([-15,22]), rank 0
M10:=CreateModularCurveRec(6,Generators(ANSWERS23[10][3]));
FindModelOfXG(M10,1); // EllipticCurve([0,-27]), rank 0
M11:=CreateModularCurveRec(6,Generators(ANSWERS23[11][3]));
FindModelOfXG(M11,1); // EllipticCurve([-135,-594]), rank 0
M12:=CreateModularCurveRec(6,Generators(ANSWERS23[12][3]));
FindModelOfXG(M12,1); // EllipticCurve([0,-27]), rank 0

// all modular curves with finitely many rational points

// check the groups which do not contain proper arithmetically admissible subgroups of genus < 2

/* proving that 36.36.1.1 is not curious */

N:=36;

G:=GL(2,Integers(N));

GENS:=[[15,13,28,33],[19,10,29,25],[21,29,14,3],[35,28,31,13]];

X:=sub<G|GENS>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;

// 1 hit, the ambient group itself

/* proving that 24.48.1.79 is not curious */

N:=24;

G:=GL(2,Integers(N));

X:=sub<G|[0,23,13,0],[1,0,3,7],[2,17,1,14],[11,12,12,23],[23,9,21,10]>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;

// 1 hit, the ambient group itself

/* proving that all proper arithmetically admissible subgroups of 24.36.1.149 have genus > 1 */

N:=24;

G:=GL(2,Integers(N));

X:=sub<G|[1,14,14,23],[1,14,16,1],[19,3,12,7],[23,1,4,13]>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;

// 1 hit, the ambient group itself

/* proving that all proper arithmetically admissible subgroups of 24.36.1.146 have genus > 1 */

N:=24;

G:=GL(2,Integers(N));

X:=sub<G|[13,17,20,11],[19,21,6,11],[19,23,14,23],[21,1,8,9]>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;

// 1 hit, the ambient group itself

/* proving that 72.72.1.c.1 = 8.6.0.1 x 9.12.0.1 has no proper arithmetically admissible subgroups of genus < 2 */

/* investigating subgroups of <8.6.0.1, 9.12.0.1> of genus < 2 */

CANDIDATES:={};

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

N:=72;
TOT:=Exponent(UnitGroup(Integers(N)));
// TOT equals 4, so we work with subgroups of index 1, 2, and 4
GN:=GL(2,Integers(N));

GENS:=[[1,4,0,1],[17,0,0,1],[25,0,0,1],[59,0,0,1],[5,14,0,1],[11,0,0,11],[1,2,0,5],[1,0,0,17],[16,11,45,2]];
X:=sub<GN|GENS>;

SX:=X meet SL(2,Integers(N));
SS:=[s`subgroup : s in Subgroups(SX)];
SS:=[s:s in SS | GN![-1,0,0,-1] in s];

SXList:={};

for i in [1..#SS] do
#SS-i+1;
if GL2Genus(SS[i]) lt 2 then
SXList:=SXList join {SS[i]};
end if;
end for;

SXList:=[s:s in SXList];
#SXList;
// 1 set in SXList, so for a subgroup to be genus 1, its special linear subgroup must be subgroup of all elements of H of determinant 1

SLsub1:=SXList[1];

/* work with SLsub1 indices 2, 4 */

/* SLsub1 and index 4 */

Slist0 := [s`subgroup : s in Subgroups(X : IndexEqual := 4)];

list1:={};
for i0 in [1..#Slist0] do
if #{Determinant(x) : x in Slist0[i0]} eq EulerPhi(N) then
list1:=list1 join {Slist0[i0]};
end if;
end for;
Slist1:=[s:s in Slist0 | s in list1];

if #list1 gt 0 then
list2:={};
for i1 in [1..#Slist1] do
if <-1,0> in {<Determinant(g),Trace(g)> : g in Slist1[i1]} then
list2:=list2 join {Slist1[i1]};
end if;
end for;
Slist2:=[s : s in Slist1 | s in list2];
end if;

if #list1 gt 0 then
if #list2 gt 0 then
list3:={};
for i2 in [1..#Slist2] do
if SX meet Slist2[i2] eq SLsub1 then
list3:=list3 join {Slist2[i2]};
end if;
end for;
end if;
end if;
Slist3:=[x:x in list3];

/*
list4:={};
if #list2 gt 0 then
if #list3 gt 0 then
list4:={Slist3[#Slist3]};
for i3 in [1..#Slist3-1] do;
CONJ:=false;
for j in [i3+1..#Slist3] do;
if IsConjugate(GN,Slist3[i3],Slist3[j]) then
CONJ:=true;
break;
end if;
if CONJ eq false then
list4:=list4 join {Slist3[i3]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs in list4];
end if;
end if;
*/

for x in Slist3 do
CANDIDATES:=CANDIDATES join {x};
end for;

/* SLsub1 and index 2 */

Slist0 := [s`subgroup : s in Subgroups(X : IndexEqual := 2)];

list1:={};
for i0 in [1..#Slist0] do
if #{Determinant(x) : x in Slist0[i0]} eq EulerPhi(N) then
list1:=list1 join {Slist0[i0]};
end if;
end for;
Slist1:=[s:s in Slist0 | s in list1];

if #list1 gt 0 then
list2:={};
for i1 in [1..#Slist1] do
if <-1,0> in {<Determinant(g),Trace(g)> : g in Slist1[i1]} then
list2:=list2 join {Slist1[i1]};
end if;
end for;
Slist2:=[s : s in Slist1 | s in list2];
end if;

if #list2 gt 0 then
list3:={};
for i2 in [1..#Slist2] do
if SX meet Slist2[i2] eq SLsub1 then
list3:=list3 join {Slist2[i2]};
end if;
end for;
Slist3:=[x : x in list3];
end if;

/*
if #list3 gt 0 then
list4:={Slist3[#Slist3]};
for i3 in [1..#Slist3-1] do;
CONJ:=false;
for j in [i3+1..#Slist3] do;
if IsConjugate(GN,Slist3[i3],Slist3[j]) then
CONJ:=true;
break;
end if;
if CONJ eq false then
list4:=list4 join {Slist3[i3]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs in list4];
end if;
*/

for x in Slist3 do
CANDIDATES:=CANDIDATES join {x};
end for;

/* only the one group is returned */


/* proving that 72.72.1.b.1 = 8.6.0.6 x 9.12.0.1 has no proper arithmetically admissible subgroups of genus < 2 */


CANDIDATES:={};

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

N:=72;
TOT:=Exponent(UnitGroup(Integers(N)));
// TOT euqals 4 so we work with subgroups of index 1, 2, and 4
GN:=GL(2,Integers(N));

GENS:=[[17,0,0,1],[11,1,0,1],[47,26,0,1],[1,1,0,11],[49,0,0,1],[1,12,0,49],[1,22,0,1],
[1,64,0,1],[1,48,0,1],[55,18,0,55],[19,36,18,19],[1,36,0,1],[1,0,36,1],[37,0,0,37]];
X:=sub<GN|GENS>;

SX:=X meet SL(2,Integers(N));
SS:=[s`subgroup : s in Subgroups(SX)];
SS:=[s:s in SS | GN![-1,0,0,-1] in s];

SXList:={};

for i in [1..#SS] do
#SS-i+1;
if GL2Genus(SS[i]) lt 2 then
SXList:=SXList join {SS[i]};
end if;
end for;

SXList:=[s:s in SXList];
#SXList;
// 1 set in SXList, so for a subgroup to be genus 1, its special linear subgroup must be subgroup of all elements of H of determinant 1

SLsub1:=SXList[1];

/* work with SLsub1 indices 2, 4 */

/* SLsub1 and index 4 */

Slist0 := [s`subgroup : s in Subgroups(X : IndexEqual := 4)];

list1:={};
for i0 in [1..#Slist0] do
if #{Determinant(x) : x in Slist0[i0]} eq EulerPhi(N) then
list1:=list1 join {Slist0[i0]};
end if;
end for;
Slist1:=[s:s in Slist0 | s in list1];

if #list1 gt 0 then
list2:={};
for i1 in [1..#Slist1] do
if <-1,0> in {<Determinant(g),Trace(g)> : g in Slist1[i1]} then
list2:=list2 join {Slist1[i1]};
end if;
end for;
Slist2:=[s : s in Slist1 | s in list2];
end if;

if #list1 gt 0 then
if #list2 gt 0 then
list3:={};
for i2 in [1..#Slist2] do
if SX meet Slist2[i2] eq SLsub1 then
list3:=list3 join {Slist2[i2]};
end if;
end for;
end if;
end if;
Slist3:=[x:x in list3];

/*
list4:={};
if #list2 gt 0 then
if #list3 gt 0 then
list4:={Slist3[#Slist3]};
for i3 in [1..#Slist3-1] do;
CONJ:=false;
for j in [i3+1..#Slist3] do;
if IsConjugate(GN,Slist3[i3],Slist3[j]) then
CONJ:=true;
break;
end if;
if CONJ eq false then
list4:=list4 join {Slist3[i3]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs in list4];
end if;
end if;
*/

for x in Slist3 do
CANDIDATES:=CANDIDATES join {x};
end for;

/* SLsub1 and index 2 */

Slist0 := [s`subgroup : s in Subgroups(X : IndexEqual := 2)];

list1:={};
for i0 in [1..#Slist0] do
if #{Determinant(x) : x in Slist0[i0]} eq EulerPhi(N) then
list1:=list1 join {Slist0[i0]};
end if;
end for;
Slist1:=[s:s in Slist0 | s in list1];

if #list1 gt 0 then
list2:={};
for i1 in [1..#Slist1] do
if <-1,0> in {<Determinant(g),Trace(g)> : g in Slist1[i1]} then
list2:=list2 join {Slist1[i1]};
end if;
end for;
Slist2:=[s : s in Slist1 | s in list2];
end if;

if #list2 gt 0 then
list3:={};
for i2 in [1..#Slist2] do
if SX meet Slist2[i2] eq SLsub1 then
list3:=list3 join {Slist2[i2]};
end if;
end for;
Slist3:=[x : x in list3];
end if;

/*
if #list3 gt 0 then
list4:={Slist3[#Slist3]};
for i3 in [1..#Slist3-1] do;
CONJ:=false;
for j in [i3+1..#Slist3] do;
if IsConjugate(GN,Slist3[i3],Slist3[j]) then
CONJ:=true;
break;
end if;
if CONJ eq false then
list4:=list4 join {Slist3[i3]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs in list4];
end if;
*/

for x in Slist3 do
CANDIDATES:=CANDIDATES join {x};
end for;

/* the only arithmetically admissible subgroup of genus 1 is the group itself */

// here we confirm the data for the curious groups of level 24 one last time

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

// confirming data for curious group 24.12.1.3

G24:=GL(2,Integers(24));

H241213:=sub<G24|[3,1,4,3],[11,3,6,23],[12,19,17,3],[22,3,21,1]>;
M241213:=CreateModularCurveRec(24,Generators(H241213));
FindModelOfXG(M241213,1); // EllipticCurve([-540,-4752]), label 576.e1

H242412:=sub<G24|[11,6,9,11],[11,18,18,1],[20,9,3,14],[23,6,9,7]>;
M242412:=CreateModularCurveRec(24,Generators(H242412));
FindModelOfXG(M242412,1); // EllipticCurve([0,-216]), label 576.e3

H24241129:=sub<G24|[12,11,23,0],[21,10,23,15],[23,9,6,13]>;
M24241129:=CreateModularCurveRec(24,Generators(H24241129));
FindModelOfXG(M24241129,1); // EllipticCurve([0,-216]), label 576.e3

X:=EllipticCurve([-540,-4752]);
g:=Generators(X)[2];
Order(g); // 0

XX:=EllipticCurve([0,-216]);
gg:=Generators(XX)[2];
Order(gg); // 0

_,phi:=IsIsogenous(XX,X);
phi(gg) eq -2*g; // true


// confirming data for curious group 24.18.1.5

H241815:=sub<G24|[1,4,14,19],[3,20,20,3],[9,8,14,21],[13,5,4,1],[23,11,20,13]>;
M241815:=CreateModularCurveRec(24,Generators(H241815));
FindModelOfXG(M241815,1); // EllipticCurve([0,8]), label 576.e4

H243618:=sub<G24|[3,22,4,21],[5,3,12,17],[15,5,16,15],[17,0,6,19],[17,6,0,23]>;
M243618:=CreateModularCurveRec(24,Generators(H243618));
FindModelOfXG(M243618,1); // EllipticCurve([-60,176]), label 576.e2

H24361149:=sub<G24|[1,14,14,23],[1,14,16,1],[19,3,12,7],[23,1,4,13]>;
M24361149:=CreateModularCurveRec(24,Generators(H24361149));
FindModelOfXG(M24361149,1); // EllipticCurve([-60,176]), label 576.e2

// confirming data for curious group 24.18.1.8

H241818:=sub<G24|[5,17,10,11],[13,6,12,5],[17,20,22,23],[21,17,2,3],[23,5,16,11]>;
M241818:=CreateModularCurveRec(24,Generators(H241818));
FindModelOfXG(M241818,1); // EllipticCurve([0,8]), label 576.e4

H243613:=sub<G24|[3,17,2,15],[9,7,8,3],[9,14,14,21],[11,3,18,17],[23,21,6,13]>;
M243613:=CreateModularCurveRec(24,Generators(H243613));
FindModelOfXG(M243613,1); // EllipticCurve([-60,176]), label 576.e2

H24361146:=sub<G24|[13,17,20,11],[19,21,6,11],[19,23,14,23],[21,1,8,9]>;
M24361146:=CreateModularCurveRec(24,Generators(H24361146));
FindModelOfXG(M24361146,1); // EllipticCurve([-60,176]), label 576.e2

// confirming data for curious group 24.36.1.3

H243613:=sub<G24|[3,17,2,15],[9,7,8,3],[9,14,14,21],[11,3,18,17],[23,21,6,13]>;
M243613:=CreateModularCurveRec(24,Generators(H243613));
FindModelOfXG(M243613,1); // EllipticCurve([-60,176]), label 576.e2

H247214:=sub<G24|[5,15,18,7],[7,0,12,17],[11,6,18,17],[19,0,18,5],[19,12,6,11]>;
M247214:=CreateModularCurveRec(24,Generators(H247214));
FindModelOfXG(M247214,1); // EllipticCurve([0,8]), label 576.e4

H2472150:=sub<G24|[9,4,8,15],[15,8,20,15],[21,11,8,15],[21,11,22,3]>;
M2472150:=CreateModularCurveRec(24,Generators(H2472150));
FindModelOfXG(M2472150,1); // EllipticCurve([0,8]), label 576.e4

// confirming data for curious group 24.36.1.8

H243618:=sub<G24|[3,22,4,21],[5,3,12,17],[15,5,16,15],[17,0,6,19],[17,6,0,23]>;
M243618:=CreateModularCurveRec(24,Generators(H243618));
FindModelOfXG(M243618,1); // EllipticCurve([-60,176]), label 576.e2

H247211:=sub<G24|[1,8,0,17],[1,8,0,23],[7,21,6,7],[17,18,6,23],[23,0,12,17]>;
M247211:=CreateModularCurveRec(24,Generators(H247211));
FindModelOfXG(M247211,1); // EllipticCurve([0,8]), label 576.e4

H2472146:=sub<G24|[1,8,0,17],[1,8,0,23],[7,21,6,7],[17,18,6,23],[23,0,12,17]>;
M2472146:=CreateModularCurveRec(24,Generators(H2472146));
FindModelOfXG(M2472146,1); // EllipticCurve([0,8]), label 576.e4

// checking the isogeny on elliptic curves ([-60,176]) and ([0,8])

X:=EllipticCurve([-60,176]);
XX:=EllipticCurve([0,8]);

g:=Generators(X)[2];
Order(g) eq 0; // true
gg:=Generators(XX)[2];
Order(gg) eq 0; // true

_,phi1:=IsIsogenous(X,XX);
_,phi2:=IsIsogenous(XX,X);

phi1(g) eq gg; // true
phi2(gg) eq 2*g; // true

