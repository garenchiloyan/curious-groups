
ANSWERS:={};

G3:=GL(2,Integers(3));
G9:=GL(2,Integers(9));
G27:=GL(2,Integers(27));
G5:=GL(2,Integers(5));
G25:=GL(2,Integers(25));

/* level 3*5 */

Left:=3;
Right:=5;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

H31:=sub<G3|[0,1,2,0],[1,1,1,2],[1,0,0,2]>; /* 3.3.0.1, 3.3.0.a.1, MAXIMAL */
H32:=sub<G3|[0,1,2,1],[1,2,0,2]>; /* 3.4.0.1, 3.4.0.a.1, MAXIMAL */
H33:=sub<G3|[0,1,2,0],[1,0,0,2]>; /* 3.6.0.1, 3.6.0.b.1 */
H34:=sub<G3|[2,0,0,2],[1,0,0,2]>; /* 3.12.0.1, 3.12.0.a.1 */
H91:=sub<G9|[0,2,4,0],[1,1,4,5],[1,0,0,2]>; /* 9.9.0.1, 9.9.0.a.1 */
H92:=sub<G9|[1,1,0,1],[2,0,0,5],[1,0,0,2]>; /* 9.12.0.1, 9.12.0.a.1 */
H93:=sub<G9|[2,0,0,5],[4,2,3,4],[1,0,0,2]>; /* 9.12.0.2, 9.12.0.b.1 */
H94:=sub<G9|[2,0,0,5],[1,3,3,1],[0,2,4,0],[1,0,0,2]>; /* 9.18.0.2, 9.18.0.d.1 */
H95:=sub<G9|[1,3,0,1],[2,1,1,1],[4,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
H96:=sub<G9|[0,2,4,1],[4,3,5,4],[4,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1, MAXIMAL */
H97:=sub<G9|[0,4,2,3],[5,1,1,4],[5,3,0,4]>; /* 9.27.0.2, 9.27.0.b.1 */
H98:=sub<G9|[1,3,0,1],[5,0,3,2],[1,0,2,2]>; /* 9.36.0.2, 9.36.0.b.1 */
H99:=sub<G9|[1,3,0,1],[5,0,3,2],[2,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
H910:=sub<G9|[1,3,0,1],[5,0,3,2],[4,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
H911:=sub<G9|[2,1,0,5],[1,2,3,2]>; /* 9.36.0.5, 9.36.0.d.2 */
H912:=sub<G9|[2,1,0,5],[4,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
H913:=sub<G9|[2,2,0,5],[2,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
H914:=sub<G9|[1,3,0,1],[2,2,3,8],[1,2,0,2]>; /* 9.36.0.7, 9.36.0.f.2 */
H915:=sub<G9|[1,3,0,1],[2,2,3,8],[2,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
H916:=sub<G9|[1,3,0,1],[5,2,3,5],[4,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */
H271:=sub<G27|[1,1,0,1],[2,1,9,5],[1,2,3,2]>; /* 27.36.0.1, 27.36.0.a.1 */

H51:=sub<G5|[2,1,0,3],[1,2,2,0],[1,1,0,2]>; /* 5.5.0.1, 5.5.0.a.1, MAXIMAL */
H52:=sub<G5|[2,0,0,3],[1,0,1,1],[1,0,0,2]>; /* 5.6.0.1, 5.6.0.a.1, MAXIMAL */
H53:=sub<G5|[3,1,0,2],[1,2,2,0],[2,2,2,1]>; /* 5.10.0.1, 5.10.0.a.1, MAXIMAL */
H54:=sub<G5|[4,0,1,4],[1,0,0,2]>; /* 5.12.0.2, 5.12.0.a.2 */
H55:=sub<G5|[4,0,1,4],[2,0,0,1]>; /* 5.12.0.1, 5.12.0.a.1 */
H56:=sub<G5|[2,1,0,3],[2,0,2,3],[1,0,2,2]>; /* 5.15.0.1, 5.15.0.a.1 */
H57:=sub<G5|[3,1,0,2],[2,1,0,1]>; /* 5.30.0.1, 5.30.0.a.1 */
H58:=sub<G5|[3,1,0,2],[2,1,3,3]>; /* 5.30.0.2, 5.30.0.b.1 */
H59:=sub<G5|[4,0,0,4],[2,0,0,1]>; /* 5.60.0.1, 5.60.0.a.1 */
H251:=sub<G25|[2,2,0,13],[4,1,3,1],[2,3,0,6]>; /* 25.30.0.1, 25.30.0.a.1 */
H252:=sub<G25|[9,10,0,14],[0,7,7,2],[2,8,0,1]>; /* 25.60.0.1, 25.60.0.a.1 */
H253:=sub<G25|[9,10,0,14],[0,7,7,2],[4,1,0,7]>; /* 25.60.0.2, 25.60.0.a.2 */

X31:=sub<GLeftRight|[0,1,2,0],[1,1,1,2],[1,0,0,2]>; /* 3.3.0.1, 3.3.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X32:=sub<GLeftRight|[0,1,2,1],[1,2,0,2]>; /* 3.4.0.1, 3.4.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X33:=sub<GLeftRight|[0,1,2,0],[1,0,0,2]>; /* 3.6.0.1, 3.6.0.b.1 */
X34:=sub<GLeftRight|[2,0,0,2],[1,0,0,2]>; /* 3.12.0.1, 3.12.0.a.1 */

LeftGroups:=[X31,X32,X33,X34];

X51:=sub<GLeftRight|[2,1,0,3+5],[1,2,2,0],[1,1,0,2]>; /* 5.5.0.1, 5.5.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X52:=sub<GLeftRight|[2,0,0,3+5],[1,0,1,1],[1,0,0,2]>; /* 5.6.0.1, 5.6.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X53:=sub<GLeftRight|[3+5,1,0,2],[1,2,2,0],[2,2,2,1]>; /* 5.10.0.1, 5.10.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X54:=sub<GLeftRight|[4,0,1,4],[1,0,0,2]>; /* 5.12.0.2, 5.12.0.a.2 */
X55:=sub<GLeftRight|[4,0,1,4],[2,0,0,1]>; /* 5.12.0.1, 5.12.0.a.1 */
X56:=sub<GLeftRight|[2,1,0,3+5],[2,0,2,3+5],[1,0,2,2]>; /* 5.15.0.1, 5.15.0.a.1 */
X57:=sub<GLeftRight|[3+5,1,0,2],[2,1,0,1]>; /* 5.30.0.1, 5.30.0.a.1 */
X58:=sub<GLeftRight|[3+5,1,0,2],[2,1,3,3+5]>; /* 5.30.0.2, 5.30.0.b.1 */
X59:=sub<GLeftRight|[4,0,0,4],[2,0,0,1]>; /* 5.60.0.1, 5.60.0.a.1 */

RightGroups:=[X51,X52,X53,X54,X55,X56,X57,X58,X59];


Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
if GL2Genus(X) lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // 9 hits

/* level 9*5 */

Left:=9;
Right:=5;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X91:=sub<GLeftRight|[0,2,4,0],[1,1,4,5],[1,0,0,2]>; /* 9.9.0.1, 9.9.0.a.1 */
X92:=sub<GLeftRight|[1,1,0,1],[2,0,0,5+9],[1,0,0,2]>; /* 9.12.0.1, 9.12.0.a.1 */
X93:=sub<GLeftRight|[2,0,0,5+9],[4,2,3,4+9],[1,0,0,2]>; /* 9.12.0.2, 9.12.0.b.1 */
X94:=sub<GLeftRight|[2,0,0,5+9],[1,3,3,1],[0,2,4,0],[1,0,0,2]>; /* 9.18.0.2, 9.18.0.d.1 */
X95:=sub<GLeftRight|[1,3,0,1],[2,1,1,1],[4,2,0,5+9]>; /* 9.18.0.1, 9.18.0.a.1 */
X96:=sub<GLeftRight|[0,2,4,1],[4,3,5,4],[4,5,0,5+9]>; /* 9.27.0.1, 9.27.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X97:=sub<GLeftRight|[0,4,2,3],[5,1,1,4],[5+9,3,0,4]>; /* 9.27.0.2, 9.27.0.b.1 */
X98:=sub<GLeftRight|[1,3,0,1],[5+9,0,3,2],[1,0,2,2]>; /* 9.36.0.2, 9.36.0.b.1 */
X99:=sub<GLeftRight|[1,3,0,1],[5+9,0,3,2],[2,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
X910:=sub<GLeftRight|[1,3,0,1],[5+9,0,3,2],[4,2,0,5+9]>; /* 9.36.0.3, 9.36.0.c.1 */
X911:=sub<GLeftRight|[2,1,0,5+9],[1,2,3,2]>; /* 9.36.0.5, 9.36.0.d.2 */
X912:=sub<GLeftRight|[2,1,0,5+9],[4,0,3,5+9]>; /* 9.36.0.6, 9.36.e.1 */
X913:=sub<GLeftRight|[2,2,0,5+9],[2,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
X914:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8],[1,2,0,2]>; /* 9.36.0.7, 9.36.0.f.2 */
X915:=sub<GLeftRight|[1,3,0,1],[2+9,2,3,8],[2,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
X916:=sub<GLeftRight|[1,3,0,1],[5,2,3,5],[4,0,0,5+9]>; /* 9.36.0.8, 9.36.0.g.1 */

LeftGroups:=[X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,X911,X912,X913,X914,X915,X916];

RightGroups:=[X51,X52,X53];

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
if GL2Genus(X) lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no additional hits

/* level 3*25 */

Left:=3;
Right:=25;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X31:=sub<GLeftRight|[0,1,2,0],[1,1,1,2],[1,0,0,2]>; /* 3.3.0.1, 3.3.0.a.1, MAXIMAL */
X32:=sub<GLeftRight|[0,1,2,1],[1,2,0,2]>; /* 3.4.0.1, 3.4.0.a.1, MAXIMAL */
X33:=sub<GLeftRight|[0,1,2,0],[1,0,0,2]>; /* 3.6.0.1, 3.6.0.b.1 */
X34:=sub<GLeftRight|[2,0,0,2],[1,0,0,2]>; /* 3.12.0.1, 3.12.0.a.1 */

LeftGroups:=[X31,X32,X33,X34];

X251:=sub<GLeftRight|[2,2,0,13],[4,1,3,1],[2,3,0,6+25]>; /* 25.30.0.1, 25.30.0.a.1, with Chinese Remainder Theorem */

X252:=sub<GLeftRight|[9+25,10,0,14],[0,7,7,2],[2,8,0,1]>; /* 25.60.0.1, 25.60.0.a.1, with Chinese Remainder Theorem */

X253:=sub<GLeftRight|[9+25,10,0,14],[0,7,7,2],[4,1,0,7]>; /* 25.60.0.2, 25.60.0.a.2, with Chinese Remainder Theorem */

RightGroups:=[X251,X252,X253];

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
if GL2Genus(X) lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

#ANSWERS; // no additional hits. Only groups are of level 15

// here we check our nine groups are the ones found in the LMFDB

ANSWERS:=[x:x in ANSWERS];

G15:=GL(2,Integers(15));

A1:=sub<G15|[2,5,5,7],[2,8,2,1],[4,13,13,14],[8,2,6,7]>; // 15.36.1.1
A2:=sub<G15|[1,14,0,4],[7,13,0,14],[8,7,0,1],[14,12,0,4]>; // 15.48.1.4
A3:=sub<G15|[0,13,14,9],[2,6,9,14],[2,7,4,10],[2,7,8,11]>; // 15.18.0.1
A4:=sub<G15|[6,11,13,7],[14,6,1,1],[14,11,3,13]>; // 15.20.1.1
A5:=sub<G15|[1,4,2,4],[5,7,14,5],[6,10,10,9],[7,6,12,7]>; // 15.30.1.1
A6:=sub<G15|[0,1,13,0],[2,6,9,8],[13,2,13,13]>; // 15.15.1.1
A7:=sub<G15|[2,8,0,2],[2,11,0,1],[13,10,0,7],[14,5,0,8]>; // 15.24.1.1
A8:=sub<G15|[1,5,0,8],[1,11,0,14],[4,2,0,7],[14,4,0,2]>; // 15.48.1.3
A9:=sub<G15|[0,7,11,0],[5,12,3,5],[8,10,10,7],[11,5,10,14]>; // 15.45.1.1

IsConjugate(G15,A1,ANSWERS[1][3]); // true
IsConjugate(G15,A2,ANSWERS[2][3]); // true
IsConjugate(G15,A3,ANSWERS[3][3]); // true
IsConjugate(G15,A4,ANSWERS[4][3]); // true
IsConjugate(G15,A5,ANSWERS[5][3]); // true
IsConjugate(G15,A6,ANSWERS[6][3]); // true
IsConjugate(G15,A7,ANSWERS[7][3]); // true
IsConjugate(G15,A8,ANSWERS[8][3]); // true
IsConjugate(G15,A9,ANSWERS[9][3]); // true

A2 subset A7; // true
A8 subset A7; // true


// here we check that no proper subgroup of 15.30.1.1 or 15.45.1.1 has genus < 2

// 15.30.1.1

N:=15;
G:=GL(2,Integers(N));

X:=A5;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for; // only one hit

// 15.45.1.1

N:=15;
G:=GL(2,Integers(N));

X:=A9;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for; // only one hit

// here we check that 15.20.1.1 and 15.36.1.1 generate elliptic curve of finite rank

load "/users/garenchiloyan/Desktop/GL2GroupTheory.m";
load "/users/garenchiloyan/Desktop/ModularCurves.m";

X:=A4;
GENS:=[x: x in Generators(X)];
ModCurRec:=CreateModularCurveRec(15,GENS);
Y:=FindModelOfXG(ModCurRec,1);
Y; // EllipticCurve([0,1,1,2,4]);
E:=EllipticCurve([0,1,1,2,4]);
Rank(E) eq 0; // true

X:=A1;
GENS:=[x: x in Generators(X)];
ModCurRec:=CreateModularCurveRec(15,GENS);
Y:=FindModelOfXG(ModCurRec,1);
Y; // EllipticCurve([1,1,1,-5,2]);
E:=EllipticCurve([1,1,1,-5,2]);
Rank(E) eq 0; // true
