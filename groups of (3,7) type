
ANSWERS:={};

G3:=GL(2,Integers(3));
G9:=GL(2,Integers(9));
G27:=GL(2,Integers(27));
G7:=GL(2,Integers(7));

/* level 3*7 */

Left:=3;
Right:=7;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

H31:=sub<G3|[0,1,2,0],[1,1,1,2],[1,0,0,2]>; /* 3.3.0.1, 3.3.0.a.1, MAXIMAL */
H32:=sub<G3|[0,1,2,1],[1,2,0,2]>; /* 3.4.0.1, 3.4.0.a.1, MAXIMAL */
H33:=sub<G3|[0,1,2,0],[1,0,0,2]>; /* 3.6.0.1, 3.6.0.b.1 */
H34:=sub<G3|[2,0,0,2],[1,0,0,2]>; /* 3.12.0.1, 3.12.0.a.1 */
H91:=sub<G9|[0,2,4,0],[1,1,4,5],[1,0,0,2]>; /* 9.9.0.1, 9.9.0.a.1 */
H92:=sub<G9|[1,1,0,1],[2,0,0,5],[1,0,0,2]>; /* 9.12.0.1, 9.12.0.a.1 */
H93:=sub<G9|[2,0,0,5],[4,2,3,4],[1,0,0,2]>; /* 9.12.0.2, 9.12.0.b.1 */
H94:=sub<G9|[2,0,0,5],[1,3,3,1],[0,2,4,0],[1,0,0,2]>; /* 9.18.0.2, 9.18.0.d.1 */
H95:=sub<G9|[1,3,0,1],[2,1,1,1],[4,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
H96:=sub<G9|[0,2,4,1],[4,3,5,4],[4,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1, MAXIMAL */
H97:=sub<G9|[0,4,2,3],[5,1,1,4],[5,3,0,4]>; /* 9.27.0.2, 9.27.0.b.1 */
H98:=sub<G9|[1,3,0,1],[5,0,3,2],[1,0,2,2]>; /* 9.36.0.2, 9.36.0.b.1 */
H99:=sub<G9|[1,3,0,1],[5,0,3,2],[2,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
H910:=sub<G9|[1,3,0,1],[5,0,3,2],[4,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
H911:=sub<G9|[2,1,0,5],[1,2,3,2]>; /* 9.36.0.5, 9.36.0.d.2 */
H912:=sub<G9|[2,1,0,5],[4,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
H913:=sub<G9|[2,2,0,5],[2,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
H914:=sub<G9|[1,3,0,1],[2,2,3,8],[1,2,0,2]>; /* 9.36.0.7, 9.36.0.f.2 */
H915:=sub<G9|[1,3,0,1],[2,2,3,8],[2,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
H916:=sub<G9|[1,3,0,1],[5,2,3,5],[4,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */
H271:=sub<G27|[1,1,0,1],[2,1,9,5],[1,2,3,2]>; /* 27.36.0.1, 27.36.0.a.1 */

H71:=sub<G7|[2,0,0,4],[3,0,1,5],[1,0,0,3]>; /* 7.8.0.1, 7.8.0.a.1, MAXIMAL */
H72:=sub<G7|[0,3,2,3],[2,4,4,5],[3,1,0,4]>; /* 7.21.0.1, 7.21.0.a.1, MAXIMAL */
H73:=sub<G7|[6,0,1,6],[1,0,0,3]>; /* 7.24.0.2, 7.24.0.a.2 */
H74:=sub<G7|[6,0,1,6],[3,0,0,1]>; /* 7.24.0.1, 7.24.0.a.1 */
H75:=sub<G7|[6,0,1,6],[3,0,0,4]>; /* 7.24.0.3, 7.24.0.b.1 */
H76:=sub<G7|[3,1,4,4],[4,4,1,3],[3,4,0,4]>; /* 7.28.0.1, 7.28.0.a.1, MAXIMAL */

X31:=sub<GLeftRight|[0,1,2,0],[1,1,1,2],[1,0,0,2]>; /* 3.3.0.1, 3.3.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X32:=sub<GLeftRight|[0,1,2,1],[1,2,0,2]>; /* 3.4.0.1, 3.4.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X33:=sub<GLeftRight|[0,1,2,0],[1,0,0,2]>; /* 3.6.0.1, 3.6.0.b.1 */
X34:=sub<GLeftRight|[2,0,0,2],[1,0,0,2]>; /* 3.12.0.1, 3.12.0.a.1 */

LeftGroups:=[X31,X32,X33,X34];

X71:=sub<GLeftRight|[2,0,0,4],[3+7,0,1,5],[1,0,0,3+7]>; /* 7.8.0.1, 7.8.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X72:=sub<GLeftRight|[0,3+7,2,3],[2+7,4,4,5],[3+7,1,0,4]>; /* 7.21.0.1, 7.21.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X73:=sub<GLeftRight|[6+7,0,1,6+7],[1,0,0,3+7]>; /* 7.24.0.2, 7.24.0.a.2 */
X74:=sub<GLeftRight|[6+7,0,1,6+7],[3+7,0,0,1]>; /* 7.24.0.1, 7.24.0.a.1 */
X75:=sub<GLeftRight|[6+7,0,1,6+7],[3+7,0,0,4]>; /* 7.24.0.3, 7.24.0.b.1 */
X76:=sub<GLeftRight|[3,1,4,4],[4,4,1,3],[3+7,4,0,4]>; /* 7.28.0.1, 7.28.0.a.1, MAXIMAL, with Chinese Remainder Theorem */

RightGroups:=[X71,X72,X73,X74,X75,X76];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");
load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
if GL2Genus(X) lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

/* level 9*7 */

Left:=9;
Right:=7;

GLeftRight:=GL(2,Integers(Left*Right));

KerLeft1:=[[1+Left*x,0,0,1] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft2:=[[1,0,0,1+Left*x] : x in [0..(1+Right)] | GCD(1+Left*x,Left*Right) eq 1];
KerLeft3:=[[1,Left,0,1],[1,0,Left,1]];

KerRight1:=[[1+Right*x,0,0,1] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight2:=[[1,0,0,1+Right*x] : x in [0..(1+Left)] | GCD(1+Right*x,Left*Right) eq 1];
KerRight3:=[[1,Right,0,1],[1,0,Right,1]];

X91:=sub<G9|[0,2,4,0],[1,1,4,5],[1,0,0,2]>; /* 9.9.0.1, 9.9.0.a.1 */
X92:=sub<G9|[1,1,0,1],[2,0,0,5],[1,0,0,2]>; /* 9.12.0.1, 9.12.0.a.1 */
X93:=sub<G9|[2,0,0,5],[4,2,3,4],[1,0,0,2]>; /* 9.12.0.2, 9.12.0.b.1 */
X94:=sub<G9|[2,0,0,5],[1,3,3,1],[0,2,4,0],[1,0,0,2]>; /* 9.18.0.2, 9.18.0.d.1 */
X95:=sub<G9|[1,3,0,1],[2,1,1,1],[4,2,0,5]>; /* 9.18.0.1, 9.18.0.a.1 */
X96:=sub<G9|[0,2,4,1],[4,3,5,4],[4,5,0,5]>; /* 9.27.0.1, 9.27.0.a.1, MAXIMAL, with Chinese Remainder Theorem */
X97:=sub<G9|[0,4,2,3],[5,1,1,4],[5,3,0,4]>; /* 9.27.0.2, 9.27.0.b.1 */
X98:=sub<G9|[1,3,0,1],[5,0,3,2],[1,0,2,2]>; /* 9.36.0.2, 9.36.0.b.1 */
X99:=sub<G9|[1,3,0,1],[5,0,3,2],[2,1,0,1]>; /* 9.36.0.1, 9.36.0.a.1 */
X910:=sub<G9|[1,3,0,1],[5,0,3,2],[4,2,0,5]>; /* 9.36.0.3, 9.36.0.c.1 */
X911:=sub<G9|[2,1,0,5],[1,2,3,2]>; /* 9.36.0.5, 9.36.0.d.2 */
X912:=sub<G9|[2,1,0,5],[4,0,3,5]>; /* 9.36.0.6, 9.36.e.1 */
X913:=sub<G9|[2,2,0,5],[2,2,3,1]>; /* 9.36.0.4, 9.36.0.d.1 */
X914:=sub<G9|[1,3,0,1],[2,2,3,8],[1,2,0,2]>; /* 9.36.0.7, 9.36.0.f.2 */
X915:=sub<G9|[1,3,0,1],[2,2,3,8],[2,1,0,1]>; /* 9.36.0.9, 9.36.0.f.1 */
X916:=sub<G9|[1,3,0,1],[5,2,3,5],[4,0,0,5]>; /* 9.36.0.8, 9.36.0.g.1 */

LeftGroups:=[X91,X92,X93,X94,X95,X96,X97,X98,X99,X910,X911,X912,X913,X914,X915,X916];

RightGroups:=[X71,X72,X76];

for i in [1..#LeftGroups] do
for j in [1..#RightGroups] do
print <#LeftGroups-i,#RightGroups-j>;
XLeft:=sub<GLeftRight|Generators(LeftGroups[i]),KerLeft1,KerLeft2,KerLeft3>;
XRight:=sub<GLeftRight|Generators(RightGroups[j]),KerRight1,KerRight2,KerRight3>;
X:=XLeft meet XRight;
if GLeftRight![-1,0,0,-1] in X then
if GL2Genus(X) lt 2 then
ANSWERS:=ANSWERS join {<GL2Label(XLeft),GL2Label(XRight),X>};
end if;
end if;
end for;
end for;

ANSWERS:=[x:x in ANSWERS];

// here we check our two groups are the ones found in the LMFDB

G21:=GL(2,Integers(21));

A1:=sub<G21|[2,14,16,5],[6,20,7,15],[10,18,18,7],[14,3,3,10]>;
A2:=sub<G21|[5,11,0,17],[5,19,0,16],[16,6,0,13],[19,17,0,4]>;
IsConjugate(G21,A1,ANSWERS[1][3]); // true
IsConjugate(G21,A2,ANSWERS[2][3]); // true

// here we check that all proper, arithmetically admissible subgroups of A1 have genus > 1

N:=21;

G:=GL(2,Integers(N));

X:=sub<G|[2,14,16,5],[6,20,7,15],[10,18,18,7],[14,3,3,10]>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;

// here we check that all proper, arithmetically admissible subgroups of A2 have genus > 1

N:=21;

G:=GL(2,Integers(N));

X:=sub<G|[5,11,0,17],[5,19,0,16],[16,6,0,13],[19,17,0,4]>;

S:=Subgroups(X);
Slist0:=[s`subgroup : s in S];

Slist1:=[s:s in Slist0 | G![-1,0,0,-1] in s];

#Slist1;

Slist2:=[s:s in Slist1 | #{Determinant(x) : x in s} eq EulerPhi(N)];

#Slist2;

Slist3:={};

for s in Slist2 do
DetTra:={<Determinant(g),Trace(g)> : g in s};
if <-1,0> in DetTra then
Slist3:=Slist3 join {s};
end if;
end for;

Slist3:=[s : s in Slist3];

nolist:={};
for i in [1..#Slist3-1] do;
for j in [i+1..#Slist3] do;
if IsConjugate(G,Slist0[i],Slist0[j]) then
nolist:=nolist join {Slist0[j]};
end if;
end for;
end for;
Slist4:=[subs : subs in Slist3 | subs notin nolist];

Attach("/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2.m");

load "/users/garenchiloyan/Desktop/ell-adic-galois-images-main/groups/gl2data.m";

for i in [1..#Slist4] do
if GL2Genus(Slist4[i]) lt 2 then
<i,GL2Level(Slist4[i]), GL2Genus(Slist4[i]), GL2Index(Slist4[i])>;
end if;
end for;
